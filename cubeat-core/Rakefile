
task :default do
  Rake.application.options.show_task_pattern = /./
  Rake.application.display_tasks_and_comments
end

#####

require 'rubygems'
gem 'ludy', '>=0.1.7'
require 'ludy/tasks/preprocess_cpp'
Project.name = 'cubeat'

#####

require 'rake/clean'
require 'fileutils'
CLEAN.include '*.o'
task :clobber => :clean do
  sh 'make clean' rescue nil
  File.delete 'Makefile' rescue nil
  File.delete 'CMakeCache.txt' rescue nil
  File.delete 'cmake_install.cmake' rescue nil
  FileUtils.rm_r 'CMakeFiles' rescue nil
end

#####

file :Makefile do
  sh 'cmake .'
end

desc 'preprocess and build'
task :build => [:prepare, :Makefile] do
  sh 'make'
end

desc "create mac's CuBeat.app"
task 'build:mac' => [:build, 'CuBeat.app']

def mac_setup_binary binary, install_path='CuBeat.app/Contents/MacOS'
  `otool -L #{binary}`.split("\n").select{ |path|
    next false unless path.start_with?("\t")
    path !~ %r{\t(/System/|/usr/lib/)}
  }.map{ |s| s[%r{(/\S+)+}] }.each{ |lib|
    name = File.basename(lib)
    dest = "#{install_path}/#{name}"
    sh "cp #{lib} #{dest}" unless File.exist?(dest)
    sh "chmod 644 #{dest}"
    sh "install_name_tool -change #{lib} '@loader_path/#{name}' #{binary}"
  }
end

file 'CuBeat.app' => ['CuBeat.app/Contents/MacOS',
                      'CuBeat.app/Contents/Resources'] do
  mac_setup_binary('CuBeat.app/Contents/MacOS/CuBeat')
  mac_setup_binary('CuBeat.app/Contents/MacOS/libcubeat.dylib')
  sh 'tar -zcf CuBeat.app.tgz CuBeat.app'
end

file 'CuBeat.app/Contents/MacOS' => ['bin/cubeat'] do
  sh 'mkdir -p CuBeat.app/Contents/MacOS'
  sh 'cp bin/cubeat CuBeat.app/Contents/MacOS/CuBeat'
  sh 'cp bin/libcubeat.dylib CuBeat.app/Contents/Resources/'
end

file 'CuBeat.app/Contents/Resources' => ['bin/libcubeat.dylib'] do
  sh 'mkdir -p CuBeat.app/Contents/Resources'
  sh 'cp -r rc CuBeat.app/Contents/Resources/'
  sh 'cp -r config CuBeat.app/Contents/Resources/'
  sh 'cp -r script CuBeat.app/Contents/Resources/'
  sh 'cp config.zzml CuBeat.app/Contents/Resources/'
end

desc 'clobber and build'
task :rebuild => [:clobber, :build]

desc 'prepare for build, doing custom preprocessing'
task :prepare => [:preprocess,
                  :reprocess_CMakeLists]

##

task :reprocess_CMakeLists do
  File.delete 'CMakeLists.txt'
  sh 'rake CMakeLists.txt'
end

##

namespace :svk do
  %w{commit push pull status update}.each{ |cmd|
    desc "svk #{cmd}"
    task(cmd){sh "svk #{cmd}"}
  }
end
