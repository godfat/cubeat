
##### this is extremely ugly, should refactor it someday

task :default do
  Rake.application.options.show_task_pattern = /./
  Rake.application.display_tasks_and_comments
end

#####

require 'rubygems'
gem 'ludy', '>=0.1.7'
require 'ludy/tasks/preprocess_cpp'
Project.name = 'cubeat'

#####

require 'rake/clean'
require 'fileutils'
CLEAN.include '*.o'
task :clobber => :clean do
  sh 'make clean' rescue nil
  File.delete 'Makefile' rescue nil
  File.delete 'CMakeCache.txt' rescue nil
  File.delete 'cmake_install.cmake' rescue nil
  FileUtils.rm_r 'CMakeFiles' rescue nil
end

#####

file :Makefile do
  sh 'cmake .'
end

desc 'preprocess and build'
task :build => [:prepare, :Makefile] do
  sh 'make'
end

desc 'clobber and build'
task :rebuild => [:clobber, :build]

desc 'prepare for build, doing custom preprocessing'
task :prepare => [:preprocess,
                  :reprocess_CMakeLists]

task :reprocess_CMakeLists do

  sh 'luajit generate_ffi.lua ai/bindings'
  sh 'luajit generate_ffi.lua net/bindings'
  sh 'luajit generate_ffi.lua ui/bindings'
  sh 'luajit generate_ffi.lua event/bindings'
  sh 'luajit generate_ffi.lua demo/bindings'

  File.delete 'CMakeLists.txt'
  sh 'rake CMakeLists.txt'
end

#####

B = 'bundle/CuBeat'

desc "create mac's CuBeat.app"
task 'build:mac' => [:build, "#{B}/CuBeat.app"] do
  mac_setup_binary("#{B}/CuBeat.app/Contents/MacOS/CuBeat")
  mac_setup_binary("#{B}/CuBeat.app/Contents/MacOS/libcubeat.dylib")
  sh "cp rc/MacOSX/Info.plist #{B}/CuBeat.app/Contents/"
  sh "cp rc/MacOSX/CuBeat.icns #{B}/CuBeat.app/Contents/Resources/"
  sh "cp -r NOTICE.txt doc rc/*.txt #{B}"
  sh "cd bundle; tar -zcf CuBeat.tgz CuBeat"
end

file "#{B}/CuBeat.app" => ["#{B}/CuBeat.app/Contents/MacOS",
                           "#{B}/CuBeat.app/Contents/Resources"]

file "#{B}/CuBeat.app/Contents/MacOS" => ['bin/cubeat'] do
  sh "mkdir -p #{B}/CuBeat.app/Contents/MacOS"
  sh "cp bin/cubeat #{B}/CuBeat.app/Contents/MacOS/CuBeat"
  sh "cp bin/libcubeat.dylib #{B}/CuBeat.app/Contents/MacOS/"
end

file "#{B}/CuBeat.app/Contents/Resources" do
  sh "mkdir -p #{B}/CuBeat.app/Contents/Resources"
  sh "cp -r rc #{B}/CuBeat.app/Contents/Resources/"
end

def mac_setup_binary binary, install_path="#{B}/CuBeat.app/Contents/MacOS"
  `otool -L #{binary}`.split("\n").select{ |path|
    next false unless path.start_with?("\t")
    path !~ %r{\t(/System/|/usr/lib/)}
  }.map{ |s| s[%r{(/\S+)+}] }.each{ |lib|
    name = File.basename(lib)
    dest = "#{install_path}/#{name}"
    sh "cp #{lib} #{dest}" unless File.exist?(dest)
    sh "chmod 644 #{dest}"
    sh "install_name_tool -change #{lib} '@loader_path/#{name}' #{binary}"
  }
  sh "chmod 644 #{binary}" unless File.extname(binary).empty?
end

#####

def linux_lib
  case `uname -m`.strip
    when 'x86_64'; 'lib64'
    else         ; 'lib32'
  end
end

desc 'build for linux'
task 'build:linux' => [:build,
                       "#{B}/bin",
                       "#{B}/#{linux_lib}",
                       "#{B}/rc"] do
  libs = %w[luajit alure boost_thread]
  linux_setup_binary(libs, "#{B}/bin/CuBeat")
  linux_setup_binary(libs, "#{B}/#{linux_lib}/libcubeat.so")
  sh "cp rc/Linux/*.sh #{B}/"
  sh "cp -r NOTICE.txt doc rc/*.txt #{B}/"
  sh "cd bundle; tar -zcf CuBeat.tgz CuBeat"
end

file "#{B}/bin" => ['bin/cubeat'] do
  sh "mkdir -p #{B}/bin"
  sh "cp bin/cubeat #{B}/bin/CuBeat"
end

file "#{B}/#{linux_lib}" => ['bin/libcubeat.so'] do
  sh "mkdir -p #{B}/#{linux_lib}"
  sh "cp bin/libcubeat.so #{B}/#{linux_lib}/"
end

file "#{B}/rc" do
  sh "cp -r rc #{B}/rc"
end

def grep_path str
  path = str[/\[.+\]/]
  path && path[1..-2]
end

def linux_setup_binary wants, binary
  rpath = grep_path(`readelf -d #{binary} | grep RPATH`)
  return unless rpath
  ld_lib = rpath.split(':') + %w[/usr/lib /usr/local/lib]

  wants_regexp = Regexp.new(wants.join('|'))

  `readelf -d #{binary} | grep NEEDED`.split("\n").map{ |str|
    grep_path(str) }.select{ |lib| lib =~ wants_regexp }.each{ |name|
      prefix = ld_lib.find{ |path| File.exist?("#{path}/#{name}") }
      dest = "#{B}/#{linux_lib}/#{name}"
      next if File.exist?(dest)
      sh "cp #{prefix}/#{name} #{dest}"
      sh "chmod 644 #{dest}"
    }
  sh "chrpath -d #{binary}"
  sh "chmod 644 #{binary}" unless File.extname(binary).empty?
end
