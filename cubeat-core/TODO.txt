
== THIS IS JUST FOR THE PROGRAMMATICAL SIDE ==

* Crashing Bugs:

  1. SplineAnimator has a bug which will crash the game when used in garbage throwing effects.
     -- But this might already been fixed. It must have some relations to ViewSprite & Tween.
     -- or is it an infinite loop? hasn't test it for a fairly long time.

* Programming-Fundamental Issues:

SKIP 1. Fix the Singleton flood.

DONE?2. Multiple EventDispatcher. Multiple Timer for Multiple Scenes.
     This probably need to be a separated small project.
     -- Let's separate the Timer as a different module?
       -- Make Timer interface return formal handles, not use shared_ptr<int> as dummies.
     -- The singleton flood must be fixed first.
       ** SKIPPED
     ** Multiple timer done, but Timer still don't return formal handles.

SKIP 3. Try to remove as many template usages as possible:
     -- presenter::cube::ViewStdOut, ViewMaster, ViewSprite, ViewSpriteMaster etc should be removed.
     -- Animators, Accessors.
     -- pull contents to cpp units, don't leave them in headers.
     ** If it ain't broken, don't fix it.

WIP  4. A better way to present the UI programatically (usually means the presenter)
     -- Lua modules? or we just fix the C++ interfaces?
     -- It'd better go with multiple event dispatchers and timers.

  5. We need more resolution options and more configs for different resolutions.

WIP  6. Lack of networking capability.
     -- a matcher (doing hole-punching as well) in pure lua(jit) 
     -- Preparation for networking
       -- client synchonization of Map states and Cube states
     -- memo 
        ..... in presenter::Game .... 
        ... blah blah ... 
        1. still have to subscribe callbacks cuz scope problem. 
           net::Manager::i().on_matched( tr1::bind(...) )
           net::Manager::i().on_connected( tr1::bind(...) )
           net::Manager::i().on_received( tr1::bind(...) ) 
        2. net::Manager::i().start_lua() //use two mockup callbacks for Server/Client 
        3. handles on_matched()
        4. handles on_connected()
        5. Lua starts calling poll_from_C() 
        6. handles on_received() (not yet implemented) and presenter::Game parses data,
           this can be refactored when message types start to bloat
        7. when you want to send message: 
           net::Manager::i().send(s) //test plain text first, and then byte stream 
           let s be messy's ok for now. let's see how I can refactor that.
        -- ABOVE FEATURE IS ALMOST DONE, NOW WE NEED TO PUT IT INTO PRODUCTION AND SEE WHAT HAPPENS
     -- next is implementing the actual gameplay protocol.

SKIP 7. Now EventDispatcher has "Focus Events" and "Ranged-picking Events" which depends on
     view::Scene, How do I fix this?
     -- Multiple EventDispatchers for Multi Scenes might have something to do with this.
     ** On a second thought, I doubt this will tangle with other features in the future.
        So, just don't do anything with it. If it can be removed, then it will be.

  8. We need a Font Factory.

* Technical Detail Issues:

0.6  1. OpenAL should be handled in a separate thread. and I should check some article of OpenAL about
     how to prevent buffer exhaustion...

WIP  2. ManyMouse on MacOSX 10.6+
     see http://hg.icculus.org/icculus/manymouse/
     -- Linux version should remove udev and shell script dependencies, have to recompile manymouse to use XInput2.
       -- need tests.
     -- Bluetooth mouse with too-customized drivers are not working well.
     -- Issue: Only if 2 mice are movable by manymouse then we reinit both config to use manymouse.
     
  3. Zombie events/sprites still a problem! Don't know what happened after I delayed 
     player->subscribe_player_specific_interaction() calls to Multi::game_start().

  4. Something about lock and delayed cleanup:
     I found many places in code where we should actually check on the weak_ptr.lock(),
     basically we have to assume it WILL somehow failed locking. if there's any performance hit,
     it would have been done already by locking, so I don't consider performance an issue here.

     and just like we can't erase or add an iterator during an iteration, it's the same for
     event subscription clean-up process. Like you can't call clean all button events in a button
     event callback itself! When in doubt, or have no obvious ways to resolve it, at least we
     should try to use EventDispatcher's timer callback to delay it.

  5. Something about Input scheme (see code Input.cpp around line 405):
     The input scheme here should have a total revamp. we should only designate Button1, Button2,
     Button3... etc, never name it. It should have the flexibility to map every input to every
     abstract button you can have in game, and you can assign every event to every button!

     The current implementation was based on more or less a wii remote idea, some group of buttons
     and other group of buttons are just not interchangable. This is not the optimal solution.
     
  6. Frame spike problem now is not neglectable. HAVE TO FIX THIS.

* Model / Gameplay Issues:

DONE?1. I think we really need real_y(pixel_y) as a model property, either use this with current
     State pattern or revamp the state pattern.
     -- Why sometimes the bottom cubes' chain state isn't taken out?
     -- Map::next_state and states are modestly modified, consider the real_y addition done.
     
  2. OneFadings should not do full BFS for each of cubes. Rather, one full pass and check who are
     connected and who aren't should suffice. (Not sure if it changes chain processing behavior)

* UI / Gameplay Issues:

0.6  1. We need better chaining cubes' indication. we need better indication of attacking and
     cubes dropping and those sort of things. In short, we need better UI and user feedback design.
     -- These are mostly game objects, not UI objects.

  2. Probably a generic high score record for each game-modes.
     -- require the UI improvements programatically
WIP  -- Marvin's http leaderboard is largely done, just lack testings. 
       -- Need integration with client. cURL? or luasocket-http? 
     NOTE: with 0.6, we probably only use local highscores, but still we need to test http leaderboard.

  3. See if we can fix resolution shrinking and manymouse <-> system mouse cursor position sync.
     -- Maybe we just have to make sure cursor value is scaled as such for now?
     -- Mouse Speed need to be adjustable (require the UI improvements programatically for the option menu)

* UI / Glitches:

0.6  1. Heat gauge has some glowing glitch. (after glow the color remained white. Tween-related issue)
     -- the glowing cubes for chaining indicator has this issue too.
     -- I was probably too lazy to use start-end tweens, causing sometimes new tweens start at wrong value.

0.6  2. AI vs AI hint for pause blocking too much of the screen.

0.6  3. Chain status sometimes will be removed too soon, even before cubes enter Waiting state.

  4. arriving at logical y when the cube below is still there dropping is worth investigating nonetheless.
     
  5. Why vsync is so bad when 2 CPU fighting? threading makes vsync inaccurate?
  
  6. HAVE TO UPDATE TO IRRLICHT 1.8 BECAUSE FULL SCREEN UNDER MAC DONT WORK.

0.6  7. Why Background can't use double type as xyz????

0.6  8. Chain messages are somewhat delayed and disappeared early??? check newest video footage ...

* Feature / Gameplay Issues:

0.6  1. Training mode and tutorials.
     -- require the UI improvements programatically

0.6  2. Better Puzzle mode.
DONE?-- Puzzle explorer done. Maybe "Puzzle Editor" in the future.

0.6  3. Multiplayer over the network.
     -- require the networking modules first. and then we'll need servers.
       ** DONE, FOR NOW
     -- now we need a real multiplayer test case.

0.6  4. AI needs more caring. They still don't use items (if any) or hassle the other one directly.
DONE -- AI scripting, and hassling other players
     -- AI now needs fine tuning for different "charactistics."
     
0.6  5. Character Differentiations - Special abilities
     -- Determine death countdown by character(player) data
     -- Determine heat accumulating speed by character(player) data
     -- Determine restore color_id random percentage by character(player) data
     -- Determine other(or self)'s "attack_factor" when init
     -- Determine if garbage drops can occasionally be normal cubes by character(player) data
     -- means to change creation & garbage flags (in ms) to false for sometime
     -- means to directly restore cubes to a specific color_id
     -- means to affect other(or self)'s "garbage_left" directly
     -- means to call a group of cubes go_exploding using correct SFX and animations
        (according to character(players))
     -- means to "transport" cubes to opponent's Map and keep their colors.
     -- means to modify or lock oneself's heat value     

  6. Other game modes:
     -- Time attack, Score attack, challenge mode, etc.
     
0.6  7. I need to implement different garbage path for different character (So ViewSprite have to do header/src separation)
        AND I need to implement different curves (even hand made curves) for AnimatedSprite::playAnime();
        
0.6  8. Music changes now are implemented, but warning sound and music changing notification sound may be intertwined.
     -- match the gameplay with BPM of the musics?
     -- The volumn system (setting volumn when playing or guarantee volumn for AB loop streams are not yet implemented)

0.6  9. Other things see my hand written note. 

0.6  10. Good solution about cut-in specials.

0.6  11. Backgrounds with multi-layer (NEW backgrounds.. old 3D backgrounds are all obsolete.)

0.6  12. Talking scene design (speechbox, 9patch, font, visual effects, etc) 

* Tools / Libraries Issues:

  1. Make Logger use warning level structure or use define to quarantine debug messages.

  2. The utils::dictionary needs writing and error-logging functionalities.
     -- But we'll switch over to all Lua setup gradually.

  3. Better particle emitter interfaces.
     -- Lua modules?

* Management / Distribution Issues:

  1. We should have some way to push nightly builds. Now windows' bundling need working too.

  2. We need a list to automate what to bundle and what not. (manifest)


*** Other Memo:

  1. Make default starting lines 3 only. I think a good choice would always be "num_of_colors - 1"
    -- And color should be adjustable, just like puyopuyo. The problem is default should be 4 or 5?
       6 has been proven too much. 4 sometimes seemed too easy to trigger big chains randomly.
    -- And we might need other ways to remove garbage/broken cubes.

  2. The rhythm of the game (especially the dying cubes) needs work.
    Others:
    -- damage_factor over time.
    -- draw game (timeout)
    -- more restrained mouse clicks (bullet/heat/energy limits or items or other mechanisms)

  3. Memo about wide range of distribution:
    -- dll's built with mingw which uses MSVCRT.dll is good to go, can be run on as old as Windows XP, I think.
       however libogg & libvorbis & luajit & OpenAL & ALURE aren't. They are dependent on MSVCRT100.dll.
       My old G1S laptop with WinXP SP3 can run it, but I doubt it's just lucky.

    -- Mac & Linux's build are probably mostly statically linked, which is good on this case.
       No, actually not. At least LuaJIT and Irrlicht aren't statically linked.

  4. We should consider changing the semantics about Animation Tweens:
     "IT IS JUST FOR ANIMATIONS. IT SHOULD NOT BE AFFECTED IN ANY WAY EXCEPT FOR DELETION DURING EXECUTION."
     (which means I think SpeedFuncAnimator is so stupid.)

  5. Does EventDispatcher::subscribe_obj_event have to KNOW the real callee? (e.g. presenter, not view)
     but then we'll enforce more shared_ptr usage. and locking twice (once for view, once for presenter)
     sounds very stupid.

0.6  6. Among other options, the sound/audio option must go into the option menu.

