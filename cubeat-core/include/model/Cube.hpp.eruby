
<% header_guard do %>

#include "model/Map.hpp"
#include "model/state/Waiting.hpp"

#include "all_fwd.hpp"
#include "utils/ObjectPool.hpp"
#include "utils/Random.hpp"
#include "data/Cube.hpp"
#include "model/SimpleCube.hpp"

#include <boost/tr1/functional.hpp>

<%= debug_include %>

namespace psc{ namespace model{

class Cube: public SimpleCube{
    friend class state::State; // for state_ = ? used by switch_state
    friend class state::Dropping; // for drop_a_block
public:
    typedef pCube pointer_type;

public:
    static pCube create(wpMap map, int x = 0, int y = 0, int color_id = 0){
        return utils::ObjectPool<Cube>::create(map, x, y, color_id)->init();
    }
    Cube(wpMap map, int x = 0, int y = 0, int color_id = 0):
        SimpleCube(x, y, color_id), map_(map)
    {}
    <% debug_hook '~Cube' do %>(){ <% end %> }

    int x() const{ return data()->x(); }
    int y() const{ return data()->y(); }
    double real_y() const{ return data()->real_y(); }
    int color_id() const{ return data()->color_id(); }
    Cube& x(int new_x){ data()->x(new_x); return *this; }
    Cube& y(int new_y){ data()->y(new_y); return *this; }
    Cube& real_y(double new_real_y){ data()->real_y(new_real_y); return *this; }
    Cube& color_id(int new_color_id){ data()->color_id(new_color_id); return *this; }

    // begin only used by Map::cycle
    bool cycle_and_die(time_t const&, time_t const&);
    // end

    // begin only used by Map::next_state
    state::pWaiting is_waiting();
    state::pDropping is_dropping();
    void lose_chain();
    // end

    // begin only used by Map::cube_can_lose_chain,
    //   which is used by Map::next_state
    state::cpDying is_dying() const;
    // end

    // begin only used by Map::attach_chain_bottom_up
    void chain(pChain chain){ chain_belonged_to_ = chain; get_chain_event()(); }
    // end

    // begin only used by OneFading::get_the_chain,
    //   which is used by OneFading::fade
    pChain const chain() const{ return chain_belonged_to_; }
    // end

    // begin only used by OneFading::fade
    void go_dying();
    // end

    // begin only used by State::map
    pMap map(){ return map_.lock(); }
    pMap const map() const{ return map_.lock(); }
    // end

    // begin only used by Map.cpp => local function check_not_continue
    friend inline bool operator!=(Cube const& lhs, Cube const& rhs){
        return lhs.color_id() == -1 || rhs.color_id() == -1 ||
               lhs.color_id() != rhs.color_id();
    }
    // end

	// begin only used by Map::insert_garbage,
	//   which is used by Map::cycle_creation_garbage
	Cube& be_garbage();
	// end

    void be_broken(int);
	void restore(int);

    void go_exploding(int);

    // for Map::insert_garbage
    Cube& go_dropping();
    // for Map::cycle_creation
    Cube& go_sinking();

    // for presenter::Cube
    void next_state();

    // 2012 added real_y. maybe we should consider add real_x, because
    // view's cube_size actually influences on both. but whatever.
    bool arrived_at_logical_y();
    void adjust_real_y();

private:
    pCube <% debug_hook 'init' do %>(){
<% end %>
        self_ = std::tr1::static_pointer_cast<Cube>(shared_from_this());
        state_ = state::Waiting::create(self());
        return self();
    }
    bool is_dead() const{ return state_.use_count() == 0; }
    state::cpSinking is_sinking() const;
    void drop_a_block();
    void drop_a_frame(time_t const&, time_t const&);
    pCube self() const{ return self_.lock(); }

private:
//  accessor :'data::pCube', :data /////// erb markers deleted by arch.jslin
    wpMap map_;
    state::pState state_;
    wpCube self_;
<%= accessor :'std::tr1::function<void()>', :drop_a_block_event, :go_dying_event, :go_exploding_event, :be_garbage_event, :be_broken_event, :get_chain_event, :lose_chain_event, :sink_a_block_event, :update_pos_event %>
<%= accessor :'std::tr1::function<void(int)>', :restore_event %>
<%= accessor :'std::tr1::function<void(int,int)>', :hit_event %>
};

}}

<% end %>
