
<% header_guard do %>

#include "all_fwd.hpp"

#include "data/MapSetting.hpp"
#include "utils/vector_2d.hpp"
#include "model/SimpleMap.hpp"

#include <boost/tr1/functional.hpp>
#include <set>
#include <list>
#include <vector>

namespace psc{
namespace model{

class Map;

template<class T>
class OneFadingT;
typedef std::tr1::shared_ptr< OneFadingT<Map> > pOneFadingOrig;

class Map : public SimpleMap
{
public:
    typedef pMap pointer_type;
    typedef pCube                        cube_type;
    typedef utils::vector_2d<pCube> container_type;
    typedef utils::vector_2d<int>   color_map_type;
    typedef std::set<pCube>         cube_list_type;
    typedef std::list<pChain>      chain_list_type;
    typedef std::vector<pCube>   preview_list_type;

public:
    static pointer_type create(presenter::wpMap owner, data::pMapSetting setting){
        // map doesn't need a pool
        return pointer_type(new Map(owner, setting))->init();
    }

public:
    Map(presenter::wpMap owner, data::pMapSetting setting):
        SimpleMap(setting), owner_(owner), cubes_(0, 0)
    {}
    Map& init_cubes();
    Map& init_cubes(color_map_type const&);
    ~Map();

    Map& <% debug_hook 'cycle' do %>(){ <% end %>
        garbage_dumpable_ = ms()->garbage_dumpable();
        dropping_creatable_ = ms()->dropping_creatable();
        if(garbage_dumpable_ && dropping_creatable_)
            cycle_warning();
        else {
            warning_level_.reset();
            alarm_sound_.reset();
        }

        update_chains();
        cycle_cubes();

        if( garbage_dumpable_ && garbage_left_ > 0 )
            cycle_creation_garbage();
    	else if( dropping_creatable_ )
    	    cycle_creation();

        return *this;
    }

    // begin used by Dropping::cycle, Waiting::cycle
    state::pState next_state(pCube);
    // end

    // begin only used by OneFading::fade
    void attach_chain_bottom_up_from(int, int, pChain);
    // end

    // only used by Game::make_garbage
    void <% debug_hook 'push_garbage' do %>(int amounts){ <%end%> garbage_left_ += amounts; }
    // end

    // for Cube#lose_chain
    bool cube_can_lose_chain(cpCube) const;

    // for Cube#drop_a_block
    Map& update_cube_position(pCube cube, int old_x, int old_y);

    color_map_type color_map() const;

    bool check_column_full() const;
    bool all_empty() const;
    bool all_waiting() const;

    //temp: added by arch.jslin only for randomly exploding cubes
    bool kill_cube_at(int x, int y);
    pSimpleMap dump_data() const;

private:
    Map& insert_cube(pCube);
    Map& insert_garbage(pCube);
    Map& insert_preview(pCube);
    void cycle_cubes();
    void cycle_a_cube(pCube, int x, int y);
    void cycle_creation();
    void cycle_creation_garbage();
    void cycle_warning();
    void fill_preview_queue();
    int fill_preview_create_color(std::vector<int>&);

    pOneFadingOrig make_OneFading(pCube);
    bool is_below_empty(cpCube) const;
    void update_chains();
    void inc_warning(int&);
    presenter::pMap owner() const{ return owner_.lock(); }
    pMap self()             const{ return self_.lock(); }

private:
    pointer_type init();

private:
    presenter::wpMap  owner_; // should be weak_ptr
    wpMap             self_;
    container_type    cubes_;
    bool dropping_creatable_, garbage_dumpable_, has_column_full_;
    std::tr1::shared_ptr<int> alarm_sound_; //alarming dummy
    preview_list_type cubes_preview_;
};

}} // end of namespace

<% end %>
