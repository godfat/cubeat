
<% header_guard do %>

#include "model/Chain.hpp"
#include "model/Cube.hpp"
#include "model/Map.hpp"
#include "utils/ObjectPool.hpp"

#include <boost/tr1/memory.hpp>

<%= debug_include %>

namespace psc{ namespace model{

template<class MapType>
class OneFadingT{
    typedef typename MapType::cube_list_type cube_list_type;

public:
    typedef std::tr1::shared_ptr<OneFadingT> pointer_type;
    static pointer_type create(cube_list_type const& list){
        return utils::ObjectPool<OneFadingT>::create(list);
    }
public:
    // begin only used by Map::next_state / next_step
    <% debug_hook 'OneFadingT' do %>(cube_list_type const& list): list_(list) {<%end%>}
    typename cube_list_type::size_type size() const{ return list_.size(); }

    void <% debug_hook 'fade' do %>(MapType& map,
                                    typename MapType::cube_type that_would_be_killed_by_map){
<% end %>
        pChain chain = get_the_chain(map);

        for(typename cube_list_type::iterator i=list_.begin(), iend=list_.end();
            i!=iend; ++i)
        {
            if( *i != that_would_be_killed_by_map ){
                (**i).go_dying();
            }
            (**i).chain(chain);
            map.attach_chain_bottom_up_from((**i).x(), (**i).y() + 1, chain);
        }
    }
    // end

private:
    pChain get_the_chain(MapType& map){
        pChain chain;

        //this for loop will get the first Chain it finds in this column or row
        for(typename cube_list_type::iterator i=list_.begin(), iend=list_.end();
            i != iend; ++i)
        {
            if( (**i).chain() ) {
                chain = (**i).chain();
                break;
            }
        }

        //if we can't find any useful Chain here, we'll create one
        if( !chain ) {
            chain = Chain::create();
            chain->step_one();
            map.push_chain( chain );
        }

        //and add combo to it
        chain->add_last_step_amounts( list_.size() );
        chain->set_last_step_position( (*list_.rbegin())->x(), (*list_.rbegin())->y() );

        return chain;
    }

private:
    cube_list_type list_;
};

}} // end of namespace

<% end %>
