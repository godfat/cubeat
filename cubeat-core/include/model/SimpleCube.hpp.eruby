
<% header_guard do %>

/* 2009.1 by arch.jslin
   This class is intended for AI calculations, and try to
   maxmize code-reusing between this class and the model::Cube class
*/

<%= debug_include %>

#include "data/Cube.hpp"
#include "utils/ObjectPool.hpp"
#include <tr1/memory>

namespace psc {
namespace model {

class SimpleMap;
typedef std::tr1::shared_ptr<SimpleMap> pSimpleMap;
typedef std::tr1::weak_ptr<SimpleMap>  wpSimpleMap;

class Chain;
typedef std::tr1::shared_ptr<Chain> pChain;

class SimpleCube: public std::tr1::shared_from_this<SimpleCube>
{
public:
    typedef std::tr1::shared_ptr<SimpleCube> pSimpleCube;
    typedef std::tr1::weak_ptr<SimpleCube>  wpSimpleCube;

    static pSimpleCube create(/*wpSimpleMap map, */int x = 0, int y = 0, int color_id = 0):
        data_(data::Cube::create(x, y, color_id)), map_(map),
        has_grounded_(false), is_broken_(false), is_garbage(false), hp_(1)
    {}
    ~SimpleCube(){}

    int x()        const { return data()->x(); }
    int y()        const { return data()->y(); }
    int color_id() const { return data()->color_id(); }
    Cube& x(int new_x)   { data()->x(new_x); return *this; }
    Cube& y(int new_y)   { data()->y(new_y); return *this; }
    Cube& color_id(int new_color_id) { data()->color_id(new_color_id); return *this; }

    // differs from model::Cube
    void chain(pChain chain)  { chain_belonged_to_ = chain; }
    pChain const chain() const{ return chain_belonged_to_; }

    // differs from model::Cube
    pSimpleMap map()            { return map_.lock(); }
    pSimpleMap const map() const{ return map_.lock(); }

    // begin only used by Map.cpp => local function check_not_continue
    friend inline bool operator!=(SimpleCube const& lhs, SimpleCube const& rhs){
        return lhs.color_id() == -1 || rhs.color_id() == -1 ||
               lhs.color_id() != rhs.color_id();
    }
    // end

    bool is_garbage()   const{ return is_garbage_; }
    bool is_broken()    const{ return is_broken_; }
	bool has_grounded() const{ return has_grounded_; }
	void set_grounded() { has_grounded_ = true; }

protected:
<%= accessor :'data::pCube', :data %>
    pChain chain_belonged_to_;
    bool has_grounded_, is_broken_, is_garbage_;
	int hp_;

private:
    //wpSimpleMap map_;

};

} //psc
} //model

<% end %>
