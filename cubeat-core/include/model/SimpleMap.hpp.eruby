
<% header_guard do %>

/* 2009.1 by arch.jslin
   This class is intended for AI calculations, and try to
   maxmize code-reusing between this class and the model::Map class
*/

#include "data/MapSetting.hpp"
#include "utils/vector_2d.hpp"

#include <boost/tr1/functional.hpp>
#include <boost/tr1/memory.hpp>
#include <set>
#include <list>
#include <vector>

namespace psc {

namespace data {
typedef std::tr1::shared_ptr<MapSetting> pMapSetting;
typedef std::tr1::weak_ptr<MapSetting>  wpMapSetting;
}

namespace model {

class SimpleCube;
typedef std::tr1::shared_ptr<SimpleCube> pSimpleCube;
typedef std::tr1::weak_ptr<SimpleCube>  wpSimpleCube;

class Chain;
typedef std::tr1::shared_ptr<Chain> pChain;
typedef std::tr1::weak_ptr<Chain>  wpChain;

class SimpleMap;

template<class T>
class OneFadingT;
typedef std::tr1::shared_ptr< OneFadingT<SimpleMap> > pOneFadingSimple;

namespace ai_detail
{
class AIUtils;
}

class SimpleMap : public std::tr1::enable_shared_from_this<SimpleMap>
{
public:
    typedef std::tr1::shared_ptr<SimpleMap> pointer_type;
    typedef std::tr1::weak_ptr<SimpleMap>  wpointer_type;
    typedef pSimpleCube                        cube_type;
    typedef utils::vector_2d<pSimpleCube> container_type;
    typedef utils::vector_2d<int>         color_map_type;
    typedef std::set<pSimpleCube>         cube_list_type;
    typedef std::list<pChain>            chain_list_type;
    typedef std::vector<pSimpleCube>   preview_list_type;

    static pointer_type create(data::pMapSetting setting) {
        // map doesn't need a pool
        return pointer_type(new SimpleMap(setting))->init();
    }
    static pointer_type create(data::pMapSetting setting, int id, int garb, int sc, int soa, bool ld,
        int warning_lv) {
        return pointer_type(new SimpleMap(setting, id, garb, sc, soa, ld, warning_lv))->init();
    }

    SimpleMap(data::pMapSetting setting):
        map_setting_(setting), id_(-1), garbage_left_(0), score_(0),
        current_sum_of_attack_(0), lock_dropping_(false), warning_level_(0), simp_cubes_(0, 0){}

    SimpleMap(data::pMapSetting setting, int id, int garb, int sc, int soa, bool ld,
              int warning_lv):
        map_setting_(setting), id_(id), garbage_left_(garb), score_(sc),
        current_sum_of_attack_(soa), lock_dropping_(ld), warning_level_(warning_lv), simp_cubes_(0, 0)
    {}

    ~SimpleMap();

    SimpleMap& cycle();

    // these are chain related, shared name with model::Map
    void attach_chain_bottom_up_from(int, int, pChain);
    void push_chain(pChain chain){ chains_.push_back(chain); }
    bool is_all_fallen() const;
    // end

    int id() const                    { return id_; }
    int warning_level() const         { return warning_level_; }
    void warning_level(int const& i)  { warning_level_ = i; }
    int score() const                 { return score_; }
    int garbage_left() const          { return garbage_left_; }
    int current_sum_of_attack() const { return current_sum_of_attack_; }

    // Only used for hacking
    void score(int in) { score_ = in; }
    void current_sum_of_attack(int in) { current_sum_of_attack_ = in; }

    void lock_dropping(bool const& f) { lock_dropping_ = f; }
    bool dropping_locked() const { return lock_dropping_; }
    data::pMapSetting const& ms() const{ return map_setting_; }

    void print_data_for_debug() const;

//private:
    pointer_type clone() const;

protected:
    void dump_cube_to(pointer_type, pSimpleCube) const;
    void dump_preview_to(pointer_type, preview_list_type const&) const;

    data::pMapSetting map_setting_;
    int id_;
    int garbage_left_;
    int score_, current_sum_of_attack_;
    bool lock_dropping_; //2012 note: setup a state to alter garbage_dumpable_ && dropping_creatable_ in Map::cycle
    chain_list_type chains_;// someday make it to be std::list
    int warning_level_; //warning level value

private:
    pointer_type init() {
        simp_cubes_.resize(map_setting_->width(), map_setting_->height());
        return shared_from_this();
    }
    bool is_below_empty(pSimpleCube) const;
    void update_chains();
    void cycle_cubes();
    void cycle_a_cube(pSimpleCube, int x, int y);
    void update_cube_position(pSimpleCube cube, int old_x, int old_y);
    void drop_cube_to_the_ground(pSimpleCube cube);
    void cleanup_map_and_drop_all();

    void check_a_fade(pSimpleCube, int, int, pChain existing_chain);
    pSimpleCube cube_at(int x, int y) { return simp_cubes_[x][y]; }
    pOneFadingSimple make_OneFading(pSimpleCube);

    container_type    simp_cubes_;
    preview_list_type simp_cubes_preview_;

    friend class ai_detail::AIUtils;
    friend class OneFadingT<SimpleMap>;
};

typedef SimpleMap::pointer_type  pSimpleMap;
typedef SimpleMap::wpointer_type wpSimpleMap;

} //model
} //psc

<% end %>
