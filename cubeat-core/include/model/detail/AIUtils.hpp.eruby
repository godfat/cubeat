
<% header_guard do %>

//This ai_detail namespace contains all the dirty work
//needed by AIBrain for manipulating SimpleMap

#include <boost/tr1/memory.hpp>
#include <vector>

namespace psc {
namespace model {

class SimpleMap;
class SimpleCube;
typedef std::tr1::shared_ptr<SimpleMap > pSimpleMap;
typedef std::tr1::shared_ptr<SimpleCube> pSimpleCube;

namespace ai_detail {

class AIUtils {
public:
    static pSimpleCube lookup(pSimpleMap const&, int x, int y);
    static pSimpleCube lookup_for_grounded(pSimpleMap const&, int x, int y);
    static std::vector<int> find_high_column_indexes(pSimpleMap const&, int threshold = 6);
    static pSimpleCube find_keycube_for_highest_chain_power
           (pSimpleMap const&, int lower_bound = 0, int upper_bound = 9999);
    static std::vector<pSimpleCube> find_garbages(pSimpleMap const&);
    static std::vector<pSimpleCube> find_brokens(pSimpleMap const&);
    static int cube_count(pSimpleMap const&);
    static int grounded_cube_count(pSimpleMap const& map);
    static pSimpleMap clone_map(pSimpleMap const&);
    static void setup(pSimpleMap&, int x, int y, pSimpleCube);
    static void kill (pSimpleMap&, int x, int y);
    static int get_base_attack(pSimpleMap cloned_map);

private:
    static int simulate_fire_at(int x, int y, pSimpleMap cloned_map); //returns chain's score sum
};

} //ai_detail
} //model
} //psc

<% end %>
