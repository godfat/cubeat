
<% header_guard do %>

#include "model/state/State.hpp"
#include "utils/ObjectPool.hpp"
#include "all_fwd.hpp"

<%= debug_include %>

namespace psc{ namespace model{ namespace state{

class Waiting: public State{
public:
    typedef pWaiting pointer_type;

public:
    static pState create(wpCube owner) {
        return utils::ObjectPoolRestorable<Waiting>::create(owner)->init();
        //return utils::ObjectPool<Waiting>::create(owner)->init();
    }

public:
    Waiting(wpCube owner): State(owner), checked_(false){}

    virtual <% debug_hook '~Waiting' do %>(){<%end%>}
    virtual void cycle(time_t const&, time_t const&);

    // begin only used by Map::next_state
    bool need_check() const{ return checked_ == false; }
    void checked(){ checked_ = true; }
    // end

    // for Cube#restore
    void uncheck(){ checked_ = false; }

protected:
    virtual pState init();

private:
    void check_chain_now();

private:
    bool checked_;
};

}}}

<% end %>
