
<% header_guard do %>

#include "model/Map.hpp"
#include "presenter/cube/ViewMaster.hpp"
#include "data/MapSetting.hpp"
#include "utils/vector_2d.hpp"

#include "all_fwd.hpp"

#include <boost/foreach.hpp>
#include <map>
#include <list>
#include <vector>

<%= debug_include %>

namespace psc{ namespace presenter{

class Map: public std::tr1::enable_shared_from_this<Map>{
public:
    typedef pMap pointer_type;
    typedef std::map<model::wpCube, pCube> container_type;

    typedef model::Map::color_map_type color_map_type;

public:
    static pMap create(data::pMapSetting setting, utils::vector_2d<int> const& cube_colors){
        return pMap(new Map(setting))->init(cube_colors);
    }
    static pMap create(data::pMapSetting setting){ return pMap(new Map(setting))->init(); }
    static pMap create(){ return create(data::MapSetting::create()); }

public:
    Map(data::pMapSetting setting): map_setting_(setting){}
    Map& set_view_master(cube::pViewMaster);
    Map& push_view_slave(cube::pViewMaster);
    Map& push_garbage_land(wpMap map){ garbage_lands_.push_back(map); return *this; }
    Map& stop_dropping();
    Map& start_dropping();

public:
    pCube make_cube(int x = 0, int y = 0, int color_id = -1);
    pCube make_garbage(int x = 0, int y = 0);
    pCube make_cube_preview(int color_id = -1);
    Map& cycle();
//    Map& cycle_slow();
//    Map& cycle_fast();
    <% debug_hook '~Map' do %>(){<%end%>}
    // model::Map::container_type const& cubes() const{ return model_.cubes(); }
    void <% debug_hook 'release' do %>(model::wpCube cube){ <%end%> cubes_.erase(cube); }

    color_map_type color_map() const{ return model_->color_map(); }
    Map& throw_garbage(double amounts){
        BOOST_FOREACH(wpMap map, garbage_lands_){
            map.lock()->push_garbage(amounts);
        }
        return *this;
    }

    int  score()        const { return model()->score(); }
    int  garbage_left() const { return model()->garbage_left(); }
    int  current_sum_of_attack() const { return model()->current_sum_of_attack(); }
    int  garbage_count() const { return model()->garbage_count(); }
    int  grounded_cube_count() const { return model()->grounded_cube_count(); }
    int  column_full_num() const { return model()->column_full_num(); }
    int  warning_level() const { return model()->warning_level(); }
    bool all_empty() const { return model()->all_empty(); }
    bool all_waiting() const { return model()->all_waiting(); }
    int  sum_of_all_enemy() const;
    bool enemy_column_full() const;
    data::pViewSetting view_setting() const{
        return view_master_ ?
                view_master_->view_setting() :
                data::pViewSetting();
    }

    Map& set_garbage_amount(int const& n) { model()->set_garbage_amount(n); return *this; }

private:
    pMap init();
    pMap init(utils::vector_2d<int> const&);
    /*static*/ void bind_cube_event(pCube);
    /*static*/ void bind_view_event(cube::pViewMaster);
    Map& push_garbage(double amounts){
        model()->push_garbage(amounts);
        return *this;
    }

    void speedup();

private:
<%= accessor 'data::pMapSetting', :map_setting %>
<%= reader 'std::list<wpMap>', :garbage_lands %>
<%= reader 'model::pMap', :model %>
    //view::pMap view_;                       //note: not used for now.
    cube::pViewMaster view_master_;           //note: must not be destructed before cubes_
    std::list<cube::pViewMaster> view_slaves_;
    container_type cubes_;

<%= accessor 'std::tr1::function<void()>', :lose_event %>
<%= accessor 'std::tr1::function<void(bool)>', :overheat_event %>
<%= accessor 'std::tr1::function<void(int)>', :column_full_event, :column_not_full_event, :warning_counting_event, :alert_bar_update_event, :pop_garbage_event %>
<%= accessor 'std::tr1::function<void(model::wpChain const&)>', :new_chain_event %>
<%= accessor 'std::tr1::function<void(model::wpChain const&, int)>', :new_garbage_event %>

<%= accessor 'std::tr1::function<bool()>', :hasting_cond %>
};

}} // end of namespace

<% end %>
