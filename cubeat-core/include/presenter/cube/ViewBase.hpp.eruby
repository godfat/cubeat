
<% header_guard do %>

#include "model/Cube.hpp"
#include <boost/tr1/functional.hpp>
#include <boost/tr1/memory.hpp>

namespace psc{ namespace presenter{ namespace cube{

class ViewBase{
public:
    typedef std::tr1::shared_ptr<ViewBase> pointer_type;
    typedef std::tr1::function<void()> callback_type;
    static pointer_type create(model::pCube){ return pointer_type(); }

public:
    ViewBase(model::pCube cube): data_(cube->data()){}
    virtual ~ViewBase(){}
    virtual void go_dying(){}
    virtual void go_exploding(int color_id){}
    virtual void be_garbage(){}
    virtual void be_broken(int /*color_id*/){}
    virtual void restore(int /*color_id*/){}
    virtual void hit(int /*dmg*/, int /*hp*/){}
    virtual void get_chain(){}
    virtual void lose_chain(){}
    virtual void losing_chain(double percentage){}
    virtual void drop_a_block(){}
    virtual void sink_a_block(){}
    virtual void drop_a_block_with_callback(callback_type){}
    virtual void sink_a_block_with_callback(callback_type){}
    virtual void update_pos(){}
    virtual void ending(int){}

    //hack
    virtual void approach_pos(){}
    virtual void garbage_fly(){}
    virtual void goto_garbage_orig(){}

protected:
    data::pCube data() const{ return data_.lock(); }

private:
    data::wpCube data_;
};

}}} // end of namespaces

<% end %>
