
<% header_guard do %>

#include "presenter/cube/ViewBase.hpp"
#include "data/BasicViewTypes.hpp"
#include <boost/tr1/memory.hpp>

namespace psc{
namespace data{
class ViewSetting;
typedef std::tr1::shared_ptr<ViewSetting> pViewSetting;
typedef std::tr1::weak_ptr<ViewSetting> wpViewSetting;
}
namespace presenter{ namespace cube{

class ViewMaster{
public:
    typedef std::tr1::shared_ptr<ViewMaster> pointer_type;
public:
    virtual ViewBase::pointer_type create(model::pCube cube) const{
        return ViewBase::pointer_type();
    }
    virtual void cycle(Map const& map){}
    virtual ~ViewMaster(){}
    ViewMaster& init(data::wpMapSetting ms){
        map_setting(ms).derived_init();
        return *this;
    }

    data::pViewSetting view_setting() const{ return view_setting_; }
    virtual void column_full(int at){}
    virtual void column_not_full(int at){}
    virtual void new_chain(model::wpChain const& chain){}
    virtual void new_garbage(int modelx, int modely, int new_count){}
    virtual void pop_garbage(int this_frame_lands){}
    virtual void warning_counting(int level){}
    virtual void alert_bar_update(int level){}
    virtual void show_overheat(bool show){}
    virtual void ability_button(int left){}

    virtual void setup_ability_button(){}

protected:
    ViewMaster(){}
    ViewMaster(data::pViewSetting view_setting): view_setting_(view_setting){}
    data::pMapSetting map_setting() const{ return map_setting_.lock(); }
    virtual void derived_init(){}

    //temporary (hold)
    view::pObject view_orig() const { return view_orig_; }
    view::pObject view_orig_;

private:
    ViewMaster& map_setting(data::wpMapSetting ms){ map_setting_ = ms; return *this; }
    data::wpMapSetting map_setting_;
    data::pViewSetting view_setting_;
};

}}} // end of namespace

<% end %>
