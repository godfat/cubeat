
<% header_guard do %>

#include "presenter/cube/ViewMaster.hpp"
#include "utils/ObjectPool.hpp"

#include <deque>
#include <boost/tr1/memory.hpp>
#include <boost/tr1/functional.hpp>

<%= debug_include %>

namespace psc{

namespace data{
class Color;
class ViewSetting;
typedef std::tr1::shared_ptr<Color> pColor;
typedef std::tr1::weak_ptr<Color> wpColor;
typedef std::tr1::shared_ptr<ViewSetting> pViewSetting;
typedef std::tr1::weak_ptr<ViewSetting> wpViewSetting;
} //data

namespace ctrl{
class Player;
typedef std::tr1::shared_ptr<Player> pPlayer;
typedef std::tr1::weak_ptr<Player> wpPlayer;
} //ctrl

namespace model{
class Map;
typedef std::tr1::shared_ptr<Map> pMap;
typedef std::tr1::weak_ptr<Map> wpMap;
class Cube;
typedef std::tr1::shared_ptr<Cube> pCube;
typedef std::tr1::weak_ptr<Cube> wpCube;
class Chain;
typedef std::tr1::shared_ptr<Chain> pChain;
typedef std::tr1::weak_ptr<Chain> wpChain;
} //model

namespace view {
class Sprite;
class Menu;
class Scene;
class AnimatedSprite;
class SpriteText;
class SFX;
typedef std::tr1::shared_ptr<Sprite> pSprite;
typedef std::tr1::weak_ptr<Sprite> wpSprite;
typedef std::tr1::shared_ptr<Menu> pMenu;
typedef std::tr1::weak_ptr<Menu> wpMenu;
typedef std::tr1::shared_ptr<Scene> pScene;
typedef std::tr1::weak_ptr<Scene> wpScene;
typedef std::tr1::shared_ptr<AnimatedSprite> pAnimatedSprite;
typedef std::tr1::weak_ptr<AnimatedSprite> wpAnimatedSprite;
typedef std::tr1::shared_ptr<SpriteText> pSpriteText;
typedef std::tr1::weak_ptr<SpriteText> wpSpriteText;
} //view

namespace presenter{
namespace cube{

// stupid binding would be a must,
// without it, ViewSprite, Sprite, etc. would be destroyed by GC!
// then enable_shared_from_this would be used.
class ViewSprite: public ViewBase, public std::tr1::enable_shared_from_this<ViewSprite>
{
    typedef std::tr1::function<void(model::pCube, int)> ShotEvent;
public:
    static ViewBase::pointer_type create(model::pCube cube, view::pObject view_orig_,
        data::pMapSetting map_setting, data::pViewSetting setting, ctrl::wpPlayer const& player)
    {
        return utils::ObjectPool<ViewSprite>::create(cube, view_orig_, map_setting, setting, player);
    }
public:
    ViewSprite(model::pCube c, view::pObject orig,
        data::pMapSetting ms, data::pViewSetting s, ctrl::wpPlayer p);

    virtual void drop_a_block();
    virtual void sink_a_block();
//    virtual void drop_a_block_with_callback(callback_type callback);
//    virtual void sink_a_block_with_callback(callback_type callback);

    virtual void update_pos();
    virtual void approach_pos();
    virtual void garbage_fly(); //only called once when model::Map::insert_garbage
    virtual void goto_garbage_orig(); //called from presenter::Map
    virtual void go_dying();
    virtual void go_exploding();
    virtual void be_broken();
    virtual void restore(int color_id);
    virtual void be_garbage();
    virtual void hit(int /*dmg*/, int hp);
    virtual void get_chain();
    virtual void lose_chain();

private:
    ViewSprite& shot_event( ShotEvent ally_cb, ShotEvent enemy_cb );
    ViewSprite& shot_event( ShotEvent ally_cb );

    data::pMapSetting map_setting() const;
    data::pViewSetting view_setting() const;
    vec2 pos_vec2() const;
    void check_if_need_callback(callback_type callback);

    static void check_cube_and_do(ShotEvent method, model::wpCube c, int dmg);

private:
    view::pSprite  body_;
    view::wpObject view_orig_;
    model::wpCube  cube_;
    data::wpMapSetting map_setting_;
    data::wpViewSetting view_setting_;
    ctrl::wpPlayer player_;

    static ShotEvent Exploding, Restore, Broken;
};

///////////////////////////////////////////////////////////////////////////////

class ViewSpriteMaster: public ViewMaster{
public:
    typedef std::tr1::shared_ptr<ViewSpriteMaster> pointer_type;

    static ViewMaster::pointer_type create(view::pScene scene, data::pViewSetting setting, ctrl::wpPlayer const& player = ctrl::wpPlayer())
    {
        pointer_type result(new ViewSpriteMaster(scene, setting, player));
        return result;
    }
    static ViewMaster::pointer_type create(view::pScene scene)
    {
        return create(scene, data::ViewSetting::create());
    }
public:
    // no covariant return type
    virtual ViewBase::pointer_type create(model::pCube cube) const;
    virtual void column_full(int at);
    virtual void column_not_full(int at);
    virtual void new_chain(model::wpChain const& chain);
    virtual void new_garbage(model::wpChain const& chain, int n);
    virtual void pop_garbage(int amount);
    virtual void warning_counting(int warning_level);
    virtual void alert_bar_update(int warning_level);
    virtual void show_overheat(bool show);

    void cleanup_chaintext();

private:
    ViewSpriteMaster(view::pScene scene, data::pViewSetting setting,
        ctrl::wpPlayer const& player);

private:
    virtual void derived_init();
    void create_warning_strips();
    void create_overheat_overlay();
    void show_warning_at(int x, bool visible);
    void pop_a_chain_text(model::wpChain const& key);

    vec2 garbage_endpoint_vec2() const;
    vec2 pos_vec2(int const& x, int const& y) const;
    static vec2 pos_vec2(data::pViewSetting const& setting, int const& x, int const& y);

private:
    view::wpScene scene_;
    ctrl::wpPlayer player_;
    view::pSprite overheat_;
    view::pSprite overheat_bg_;
    view::pAnimatedSprite alert_bar_top_;
    view::pAnimatedSprite alert_bar_bottom_;
    std::vector< view::pSprite > warning_strip_;
    std::map< model::wpChain, view::pMenu > chain_texts_;
    std::list< model::wpChain > chain_texts_to_be_deleted_;
    std::deque< view::pSprite > attack_cubes_;
    typedef std::pair<model::wpChain const, view::pMenu > ChainTextPair;
    typedef std::map< model::wpChain, view::pMenu >       ChainTextMap;
};

} //cube
} //presenter
} //psc

<% end %>
