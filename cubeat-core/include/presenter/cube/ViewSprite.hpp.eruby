
<% header_guard do %>

#include "model/Chain.hpp"

#include "view/Sprite.hpp"
#include "view/Menu.hpp"
#include "view/Scene.hpp"
#include "view/AnimatedSprite.hpp"
#include "view/SpriteText.hpp"

#include "presenter/cube/ViewMaster.hpp"

#include "data/ViewSetting.hpp"
#include "data/Color.hpp"

#include "utils/Random.hpp"
#include "utils/to_s.hpp"
#include "utils/Logger.hpp"

#include "EventDispatcher.hpp"

#include "Accessors.hpp"
#include "EasingEquations.hpp"
#include "Input.hpp"
#include "Player.hpp"
#include "Sound.hpp"

#include "all_fwd.hpp"

#include <boost/foreach.hpp>

#include <tr1/functional>

<%= debug_include %>

namespace psc{ namespace presenter{ namespace cube{

// stupid binding would be a must,
// without it, ViewSprite, Sprite, etc. would be destroyed by GC!
// then enable_shared_from_this would be used.
class ViewSprite: public ViewBase, public std::tr1::enable_shared_from_this<ViewSprite>{
public:
    static ViewBase::pointer_type create(model::pCube cube, view::pObject view_orig_,
        data::pMapSetting map_setting, data::pViewSetting setting, ctrl::wpPlayer const& player)
    {
        return utils::ObjectPool<ViewSprite>::create(cube, view_orig_, map_setting, setting, player);
    }
public:
    ViewSprite(model::pCube c, view::pObject orig,
        data::pMapSetting ms, data::pViewSetting s, ctrl::wpPlayer p):
        ViewBase(c), view_orig_(orig), cube_(c), map_setting_(ms), view_setting_(s), player_(p)
    {
        body_ = view::Sprite::create("cubes/cube1", view_orig_.lock(),
                                     s->cube_size(), s->cube_size(), true);

        body_->set<accessor::Pos2D>(pos_vec2());

        restore(c->data()->color_id());
    }

    virtual void <% debug_hook 'drop_a_block' do %>(){ <% end %>
        body_->tween<easing::Linear, accessor::Pos2D>(
            pos_vec2(), map_setting()->cube_dropping_duration());
    }

    virtual void <% debug_hook 'sink_a_block' do %>(){ <% end %>
        body_->tween<easing::Linear, accessor::Pos2D>(
            pos_vec2(), map_setting()->cube_sinking_duration());
    }

    virtual void <% debug_hook 'drop_a_block_with_callback' do %>(callback_type callback){ <% end %>
        body_->tween<easing::Linear, accessor::Pos2D>(
            pos_vec2(), map_setting()->cube_dropping_duration(), 0,
            std::tr1::bind(&ViewSprite::check_if_need_callback, shared_from_this(), callback));
    }

    virtual void <% debug_hook 'sink_a_block_with_callback' do %>(callback_type callback){ <% end %>
        if( ctrl::pPlayer p = player_.lock() ) {
            body_->tween( data::AnimatorParam<easing::Linear, accessor::Pos2D>().end(pos_vec2())
                  .cb(callback).speedfunc( std::tr1::bind(&ctrl::Player::haste_speedfunc, p->shared_from_this(), map_setting()->speed()) ) );
        } else {
            body_->tween<easing::Linear, accessor::Pos2D>(
                pos_vec2(), map_setting()->cube_sinking_duration(), 0,
                std::tr1::bind(&ViewSprite::check_if_need_callback, shared_from_this(), callback));
        }
    }

    virtual void <% debug_hook 'go_dying' do %>(){ <% end %>
        unsigned int duration = map_setting()->cube_dying_duration();
        body_->tween<easing::Linear, accessor::GradientEmissive>(128, duration);
        body_->tween<easing::Linear, accessor::Alpha>(0, duration);
        body_->tween<easing::Linear, accessor::Rotation>(vec3(0,0,180), duration);
        body_->tween<easing::IQuad, accessor::Scale>(vec3(0,0,0), duration);
    }

    virtual void <% debug_hook 'go_exploding' do %>(){ <% end %>
        body_->clearAllTween();
        body_->setPickable(false);
        if( cube_.lock()->is_garbage() )
            body_->setTexture( "cubes/garbage0" );
        // stupid binding would be a must,
        // without it, ViewSprite, Sprite, etc. would be destroyed by GC!
        body_->setDepth(-40); //so it is not blocked in view;
        body_->tween<easing::OQuad, accessor::Scale>(vec3(1.3,1.3,1.3), 300);
        body_->tween<easing::Linear, accessor::Alpha>(0, 300);
        body_->tween<easing::Linear, accessor::GradientEmissive>(255, 300,
            0, std::tr1::bind(&ViewSprite::just_for_hold_shared_ptr, shared_from_this()) );
    }

    virtual void <% debug_hook 'be_broken' do %>(){ <% end %>
        body_->setTexture("cubes/cube" + utils::to_s(utils::random(4)+1));
        body_->set<accessor::GradientDiffuse>( 255 );
        body_->tween<easing::OBack, accessor::Scale>(vec3(.7,.7,.7), vec3(1,1,1), 300u);
        shot_event(&model::Cube::restore, &model::Cube::go_exploding);
        //Sound::i().play("1/d/ShotA@11.wav");
    }

    virtual void <% debug_hook 'restore' do %>(int color_id){ <% end %>
        if( color_id == -1 ) return;
        body_->setTexture("cubes/cube" + utils::to_s(utils::random(4)+1));
        data::Color col = data::Color::from_id(color_id);
        col.offset();
        body_->set<accessor::ColorDiffuse>( 0xff000000 | col.rgb() );
        body_->tween<easing::OBack, accessor::Scale>(vec3(.7,.7,.7), vec3(1,1,1), 300u);
        shot_event(&model::Cube::go_exploding, &model::Cube::be_broken);
    }

    virtual void <% debug_hook 'be_garbage' do %>(){ <% end %>
        body_->setTexture("cubes/garbage3");
        shot_event(&model::Cube::go_exploding);
    }

    virtual void <% debug_hook 'hit' do %>(int /*dmg*/, int hp){ <% end %>
        body_->tween<easing::OBack, accessor::Scale>(vec3(.7,.7,.7), vec3(1,1,1), 300u);
        if( cube_.lock()->is_garbage() ) {
            body_->setTexture("cubes/garbage" + utils::to_s(hp));
            Sound::i().play("1/c/GlassF@11.wav");
        }
        else {
            int alpha = body_->get<accessor::Alpha>();
            body_->tween<easing::Linear, accessor::Alpha>(alpha/2 + 30, 300);
            Sound::i().play("1/b/HitB@11.wav");
        }
    }

    virtual void <% debug_hook 'get_chain' do %>(){ <% end %>
        if( !cube_.lock()->is_garbage() && !cube_.lock()->is_broken() )
        body_->tween<easing::SineCirc, accessor::GradientEmissive>(100, 500u, -1);
    }

    virtual void <% debug_hook 'lose_chain' do %>(){ <% end %>
        body_->tween<easing::Linear, accessor::GradientEmissive>(0, 100u);
    }

private:
    template <class MemFn>
    ViewSprite& shot_event( MemFn ally_cb, MemFn enemy_cb ) {
        using namespace std::tr1::placeholders;
        if( ctrl::pPlayer p = player_.lock() ) {
            p->subscribe_shot_event( body_,
                std::tr1::bind( &ViewSprite::check_cube_and_do, std::tr1::mem_fn(ally_cb), cube_, _1),
                std::tr1::bind( &ViewSprite::check_cube_and_do, std::tr1::mem_fn(enemy_cb), cube_, _1)
            );
        }
        return *this;
    }
    template <class MemFn>
    ViewSprite& shot_event( MemFn ally_cb ) {
        using namespace std::tr1::placeholders;
        if( ctrl::pPlayer p = player_.lock() ) {
            p->subscribe_shot_event( body_,
                std::tr1::bind( &ViewSprite::check_cube_and_do, std::tr1::mem_fn(ally_cb), cube_, _1),
                0);
        }
        return *this;
    }
    data::pMapSetting map_setting() const{ return map_setting_.lock(); }
    data::pViewSetting view_setting() const{ return view_setting_.lock(); }
    vec2 pos_vec2() const{
        data::pViewSetting s = view_setting();
        data::pCube d = data();
        return vec2( ( d->x()*s->cube_size() + s->cube_size()/2 ),
                     ( d->y()*s->cube_size() + s->cube_size()/2 )*-1 );
                                            // NOTE: reversed y
    }
    static void check_cube_and_do(std::tr1::function<void(model::pCube, int)> method,
        model::wpCube c, int dmg)
    {
        if(model::pCube cube = c.lock()) method(cube, dmg);
    }
    void <% debug_hook 'check_if_need_callback' do %>(callback_type callback){ <% end %>
        if(model::pCube c = cube_.lock()) callback();
    }
    void just_for_hold_shared_ptr(){}

private:
    view::pSprite  body_;
    view::wpObject view_orig_;
    model::wpCube  cube_;
    data::wpMapSetting map_setting_;
    data::wpViewSetting view_setting_;
    ctrl::wpPlayer player_;
};

class ViewSpriteMaster: public ViewMaster{
public:
    typedef std::tr1::shared_ptr<ViewSpriteMaster> pointer_type;

    static ViewMaster::pointer_type create(view::pScene scene, data::pViewSetting setting, ctrl::wpPlayer const& player = ctrl::wpPlayer())
    {
        pointer_type result(new ViewSpriteMaster(scene, setting, player));
        ctrl::EventDispatcher::i().subscribe_timer(
            std::tr1::bind(&ViewSpriteMaster::cleanup, result.get()),
            result, 10, -1);
        return result;
    }
    static ViewMaster::pointer_type create(view::pScene scene)
    {
        return create(scene, data::ViewSetting::create());
    }
public:
    // no covariant return type
    virtual ViewBase::pointer_type create(model::pCube cube) const{
        return ViewSprite::create(cube, view_orig_, map_setting(), view_setting(), player_);
    }

    virtual void <% debug_hook 'column_full' do %>(int at){ <% end %>
        show_warning_at(at, true);
    }
    virtual void <% debug_hook 'column_not_full' do %>(int at){ <% end %>
        show_warning_at(at, false);
    }

    virtual void new_chain(model::pChain chain){
        int combo = chain->step();
        int amounts = chain->last_step_amounts();

        using namespace accessor; using namespace easing;
        std::string str("Chain " + utils::to_s(combo));
        std::string str2( utils::to_s(amounts) + " cubes!" );
        view::pScene s = scene_.lock();

        int y_offset = 200, x_offset = 0, w = map_setting()->width();
        if( map_setting()->width() % 2 == 0 )
            x_offset = (pos_vec2(w/2, 0).X + pos_vec2(w/2-1, 0).X) / 2;
        else x_offset = pos_vec2(w/2, 0).X;

        if( chain_texts_.find( chain ) == chain_texts_.end() ) {
            BOOST_FOREACH(ChainTextPair const& it, chain_texts_)
                y_offset += it.second->getSprite("chain").get<Size2D>().Y * 2;
            chain_texts_.insert( std::make_pair(chain, view::pMenu()) );
        } else y_offset = chain_texts_[chain]->get<Pos2D>().Y;

        view::pMenu m = view::Menu::create("", s, 100, 100, true);
        m->addSpriteText("chaino",  str, "Star Jedi", 0, 40, true, data::Color(255,0,0))
          .addSpriteText("chain",   str, "Star Jedi", 0, 40, true)
          .addSpriteText("amounto", str2,"Star Jedi", 0, 25, true, data::Color(255,0,0))
          .addSpriteText("amount",  str2,"Star Jedi", 0, 25, true)
          .setPickable(false);
        m->getSprite("chaino").set<Pos2D>(vec2(1,-1)).set<Scale>(vec3(1.03,1.15,1)).setPickable(false);
        m->getSprite("chain").setDepth(-10).setPickable(false);
        m->getSprite("amounto").set<Pos2D>(vec2(1,39)).set<Scale>(vec3(1.03,1.15,1)).setPickable(false);
        m->getSprite("amount").setDepth(-10).set<Pos2D>(vec2(0,40)).setPickable(false);
        m->setDepth(-100).set<Pos2D>( vec2(x_offset, y_offset) )
          .tween<OElastic, Scale>(vec3(0,0,0), vec3(1 + (0.12*combo),1 + (0.12*combo), 1), 1000, 0,
                                  std::tr1::bind(&ViewSpriteMaster::pop_a_chain_text, this, chain) );

        chain_texts_[ chain ] = m;
        Sound::i().play( ("2/2b_" + utils::to_s(combo >= 7 ? 7 : combo) + ".mp3"));
    }

    virtual void new_garbage(model::pChain chain, std::list<wpMap> const& garbage_lands, int n){
        int modelx = chain->last_step_x(), modely = chain->last_step_y();

        using namespace accessor; using namespace easing; using std::tr1::bind;
        using utils::to_s;
        vec2 pos = pos_vec2(modelx, modely);
        view::pScene s = scene_.lock();
        int num = n>20?20:n; //limit the animated garbage up to 20 ...in case of too many
        BOOST_FOREACH(wpMap const& mg, garbage_lands) {
            data::pMapSetting ms = mg.lock()->map_setting();
            vec2 endp = pos_vec2(mg.lock()->view_setting(), ms->width()/2, ms->height()+2);
            for( int i = 0; i < num; ++i ) {
                view::pSprite g = view::Sprite::create("cubes/cube"+to_s(utils::random(4)+1), s, 64, 64, true);
                vec2 midp = (pos + endp)/2;
                midp.X += utils::random(200) - 100; midp.Y += utils::random(200) - 100;
                std::vector<vec2> wp; wp.push_back(pos); wp.push_back(midp); wp.push_back(endp);
                //std::vector<float> tension(3, .7f); //dont use tension yet, SplineAnimator has bug.
                data::AnimatorParam<Linear, Rotation> rota;
                data::AnimatorParam<IQuad, Alpha> alpha;
                data::AnimatorParam<Linear, Scale> scale;
                data::WaypointParam<ICirc, Pos2D> way;
                rota.end(vec3(0,0,360)).duration(700).loop(-1).delay(-utils::random(500));
                alpha.start(0).end(255).duration(700);
                scale.start(vec3(.1,.1,.1)).end(vec3(1,1,1)).duration(700);
                //way.waypoints(wp).tensions(tension).duration(700+utils::random(300)); //dont use tension yet
                way.waypoints(wp).duration(700+utils::random(300));
                way.cb(bind(&view::Object::set<Visible>, g, false)); //hold copy of shared ptr so its alive.
                g->setDepth(-50).set<GradientDiffuse>(100+utils::random(66))
                  .tween(rota).tween(alpha).tween(scale).tween(way);
            }
        }
    }

    virtual void <% debug_hook 'warning_counting' do %>(int warning_level){ <% end %>
        using std::tr1::bind; using namespace accessor; using namespace easing;

        Sound::i().play("3/3d/alarm.mp3");
        alert_bar_top_->playAnime("moving", 1000);
        alert_bar_top_->tween<SineCirc, ColorDiffuseVec3>(vec3(255, 255, 255), vec3(255, 0, 0), 1000u);
        alert_bar_bottom_->playAnime("moving", 1000);
        alert_bar_bottom_->tween<SineCirc, ColorDiffuseVec3>(vec3(255, 255, 255), vec3(255, 0, 0), 1000u);
    }

    virtual void <% debug_hook 'alert_bar_update' do %>(int warning_level){ <% end %>
        using namespace accessor;
        if( warning_level < 1 ) {
            alert_bar_top_->set< Visible >( false );
            alert_bar_top_->set< ScaleWithUV >( vec2(1, 1) );
            alert_bar_bottom_->set< Visible >( false );
            alert_bar_bottom_->set< ScaleWithUV >( vec2(1, 1) );
        } else {
            alert_bar_top_->set< ScaleWithUV >( vec2((warning_level)/100.0, 1) );
            alert_bar_top_->set< Visible >( true );
            alert_bar_bottom_->set< ScaleWithUV >( vec2((warning_level)/100.0, 1) );
            alert_bar_bottom_->set< Visible >( true );
        }
    }

private:
    ViewSpriteMaster(view::pScene scene, data::pViewSetting setting,
        ctrl::wpPlayer const& player): ViewMaster(setting),
        scene_(scene), player_(player)
    {   //temporary
        view_orig_ = view::Object::create( scene );
        view_orig_->set<accessor::Pos2D>( vec2(setting->x_offset(), setting->y_offset()) );
    }

private:
    void <% debug_hook 'create_warning_strips' do %>(){ <% end %>
        using namespace accessor; using namespace easing;
        view::pScene scene = scene_.lock();
        for( int i=0, width=map_setting()->width(),
                      h=map_setting()->height()-1; i<width; ++i )
        {
            view::pSprite temp = view::Sprite::create("warning", scene, 64, 64*h, true);
            vec2 pos;
            if( h % 2 == 0 )
                pos = (pos_vec2(i, h/2) + pos_vec2(i, h/2-1)) / 2;
            else pos = pos_vec2(i, h/2);
            temp->setDepth(-50).set<Pos2D>( pos ).setPickable(false);
            temp->set<ColorDiffuseVec3>(vec3(255,0,0)).set<Alpha>(64).set<Visible>(false);
            temp->tween<SineCirc, Alpha>(0, 1000u, -1);
            warning_strip_.push_back( temp );
        }
    }

    virtual void derived_init(){
        using namespace accessor;
        int w = map_setting()->width();
        int h = map_setting()->height() - 1;
        vec2 pos, pos2;
        if( w % 2 == 0 )
            pos = (pos_vec2(w/2, h) + pos_vec2(w/2-1, h)) / 2;
        else pos = pos_vec2(w/2, h);
        pos.Y += 10;

        //warning: the position and scale data here should be configurable.
        alert_bar_top_ = view::AnimatedSprite::create("alert", scene_.lock(), 64*w, 44, true);
        alert_bar_top_->playAnime("moving", 1000).setDepth(-50).set<Pos2D>( pos )
                       .set<Visible>(false).setPickable(false);

        pos2 = pos; pos2.Y = 706;

        alert_bar_bottom_ = view::AnimatedSprite::create("alert", scene_.lock(), 64*w, 44, true);
        alert_bar_bottom_->playAnime("moving", 1000).setDepth(-50).set<Pos2D>( pos2 )
                          .set<Visible>(false).setPickable(false);

        create_warning_strips();
    }

    void show_warning_at(int x, bool visible){
        if( !map_setting()->dropping_creatable() ) visible = false;
        warning_strip_[x]->set<accessor::Visible>(visible);
    }

    void pop_a_chain_text(model::wpChain const& key) {
        chain_texts_to_be_deleted_.push_back( key );
    }

    void cleanup(){
        //delete chain_texts here
        BOOST_FOREACH(model::wpChain const& t, chain_texts_to_be_deleted_){
            chain_texts_.erase(t);
        }
        chain_texts_to_be_deleted_.clear();
    }

    vec2 garbage_endpoint_vec2() const {
        return pos_vec2(map_setting()->width()/2, map_setting()->height()+2); //endpoint is out of bound
    }

    vec2 pos_vec2(int const& x, int const& y) const{
        return pos_vec2(view_setting(), x, y);
    }

    static vec2 pos_vec2(data::pViewSetting const& setting, int const& x, int const& y){
        return vec2( setting->x_offset() + x*setting->cube_size() + setting->cube_size()/2,
                     setting->y_offset() +(y*setting->cube_size() + setting->cube_size()/2)*-1 );
                     //note: y reversed
    }

private:
    view::wpScene scene_;
    ctrl::wpPlayer player_;
    view::pAnimatedSprite alert_bar_top_;
    view::pAnimatedSprite alert_bar_bottom_;
    std::vector< view::pSprite > warning_strip_;
    std::map< model::wpChain, view::pMenu > chain_texts_;
    std::list< model::wpChain > chain_texts_to_be_deleted_;
    typedef std::pair<model::wpChain const, view::pMenu > ChainTextPair;
    typedef std::map< model::wpChain, view::pMenu >       ChainTextMap;
};

}}} // end of namespaces

<% end %>
