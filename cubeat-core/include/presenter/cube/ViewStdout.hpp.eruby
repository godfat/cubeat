
<% header_guard do %>

#include "presenter/cube/ViewMaster.hpp"
#include "presenter/Map.hpp"
#include <cstdio> // for printf
#include <ctime> // for clock

namespace psc{ namespace presenter{ namespace cube{

class ViewStdoutMaster: public ViewMaster{
public:
    static ViewMaster::pointer_type create(){
        return ViewMaster::pointer_type(new ViewStdoutMaster);
    }
public:
    virtual void redraw(Map const& map){
        std::clock_t now = std::clock();
        if( now - last_ < CLOCKS_PER_SEC/10.0 ) return;
        else last_ = now;

        Map::color_map_type p = map.color_map();
        for(int y=map.map_setting()->height()-1; y>=0; --y){
            for(int x=0; x<map.map_setting()->width(); ++x)
                std::printf("%2d", p[x][y]);
            std::printf("\n");
        }
        std::printf("\n");
        std::fflush(stdout);
    }
private:
    ViewStdoutMaster(): last_(std::clock()){}
private:
    std::clock_t last_;
};

}}} // end of namespaces

<% end %>
