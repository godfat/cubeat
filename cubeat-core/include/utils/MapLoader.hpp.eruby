
<% header_guard do %>

#include "presenter/Map.hpp"
#include "Conf.hpp"
#include "data/MapSetting.hpp"
#include "utils/vector_2d.hpp"
#include "utils/to_s.hpp"
#include "utils/Random.hpp"
#include "utils/Logger.hpp"
#include "utils/puzzle_binding.hpp"

#include <string>
#include <fstream>

#include <cstdlib>

namespace psc{ namespace utils{

class MapLoader{
public:
    static presenter::Map::pointer_type generate(int level){

        lua_State* L = luaL_newstate();
        luaL_openlibs(L);
        puzzle_binding(L, level);
        lua_close(L);

        return load("tmp/puzzle.zzml");
    }

    static presenter::Map::pointer_type load(int level){
        map_any m = Conf::i().config_of("puzzles/max");
        return load(level, random(m.I(to_s(level))));
    }

    static presenter::Map::pointer_type load(int level, int id){
        create_config(level, id);
        return load("tmp/puzzle.zzml");
    }

public:
    static presenter::Map::pointer_type load(std::string const& path){
        return presenter::Map::create(load_map_setting(path.c_str()),
                                      load_cube_colors(path.c_str()));
    }
    static data::MapSetting::pointer_type load_map_setting(std::string const& path){
        return load_map_setting(path.c_str()); }
    static vector_2d<int> load_cube_colors(std::string const& path){
        return load_cube_colors(path.c_str()); }


    static presenter::Map::pointer_type load(char const* path){
        return presenter::Map::create(load_map_setting(path),
                                      load_cube_colors(path));
    }

    static data::MapSetting::pointer_type load_map_setting(char const* path){
        map_any m = Conf::i().config_of(path);
        data::MapSetting::pointer_type result = data::MapSetting::create();

        result->color_amounts(m.I("color_amounts")).
                chain_amounts(m.I("chain_amounts")).
                starting_line(m.I("starting_line")).
                chaining_duration(m.I("chaining_duration")).
                cube_dying_duration(m.I("cube_dying_duration")).
                cube_sinking_duration(m.I("cube_sinking_duration")).
                cube_dropping_duration(m.I("cube_dropping_duration")).
                speed(m.F("speed")).
                damage_factor(m.F("damage_factor")).
                width(m.I("width")).
                height(m.I("height")).
                dropping_creatable(m.I("dropping_creatable") == 1 ? true : false).
                garbage_dumpable(m.I("garbage_dumpable") == 1 ? true : false);

        return result;
    }

    static vector_2d<int> load_cube_colors(char const* path){
        map_any m = Conf::i().config_of(path);
        int width = m.I("width"), height = m.I("height");
        vector_2d<int> result(width, height);

        for(int y=0; y<height; ++y)
            for(int x=0; x<width; ++x)
                result[x][height-1-y] = m.V("cube_colors").V(y).I(x);

        return result;
    }

private:
    static void create_config(int level, int id){
        char const* delimiter = "---------------------------------------";
        // std::ifstream from("config/puzzles.zzml");

        std::ifstream from;
        if(level < 10)
            from.open(("config/puzzles/level0" + to_s(level) + ".zzml").c_str());
        else
            from.open(("config/puzzles/level" + to_s(level) + ".zzml").c_str());

        std::string buffer;
        for(int i=0; i<id; ++i)
            while(buffer != delimiter)
                getline(from, buffer);

        buffer.assign("");
        std::string result;
        while(buffer != delimiter){
            result += buffer;
            getline(from, buffer);
        }

        std::ofstream to("tmp/puzzle.zzml");
        to << result;
    }

private:
    MapLoader();
};

}}

<% end %>
