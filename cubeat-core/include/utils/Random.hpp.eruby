
<% header_guard do %>

#if (__GNUC__ >= 4) && (__GNUC_MINOR__ >= 3)
#include <boost/tr1/random.hpp>
#else
#include <boost/tr1/random.hpp>
#endif
#include <ctime>
namespace psc{ namespace utils{

class Random{
public:
    static Random& i(){ static Random rnd; return rnd; }

public:
    int random(int max){
        if( max == 0) return 0;
        dice_.distribution() = std::tr1::uniform_int<>(0, max-1);
        return dice_();
    }
private:
    Random(): dice_(std::tr1::mt19937(std::time(0)^std::clock()), std::tr1::uniform_int<>()){}
    std::tr1::variate_generator<std::tr1::mt19937, std::tr1::uniform_int<> > dice_;
};

inline int random(int max){
    return Random::i().random(max);
}

}} // end of namespace
<% end %>
