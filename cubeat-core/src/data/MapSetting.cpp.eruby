
#include "data/MapSetting.hpp"
#include "utils/dictionary.hpp"

using namespace psc;
using namespace data;

MapSetting::MapSetting(utils::map_any const& conf):
    color_amounts_( conf.I("color_amounts") ),
    chain_amounts_( conf.I("chain_amounts") ),
    starting_line_( conf.I("starting_line") ),
    chaining_duration_( conf.I("chaining_duration") ),
    cube_dying_duration_( conf.I("cube_dying_duration") ),
    cube_sinking_duration_( conf.I("cube_sinking_duration") ),
    cube_dropping_duration_( conf.I("cube_dropping_duration") ),
    warning_check_delay_( conf.I("warning_check_delay") ),
    warning_gap_( conf.I("warning_gap") ),
    drop_normal_chance_( conf.I("drop_normal_chance") ),
    sink_speed_( conf.F("sink_speed") ),
    sink_speed_add_( conf.F("sink_speed_add") ),
    sink_speed_limit_( conf.F("sink_speed_limit") ),
    drop_speed_( conf.F("drop_speed") ),
    damage_factor_( conf.F("damage_factor") ),
    negate_damage_factor_( conf.F("negate_damage_factor") ),
    width_( conf.I("width") ),
    height_( conf.I("height") ),
    dropping_creatable_( static_cast<bool>(conf.I("dropping_creatable")) ),
    garbage_dumpable_( static_cast<bool>(conf.I("garbage_dumpable")) ),
    use_broken_as_garbage_( static_cast<bool>(conf.I("use_broken_as_garbage")) ),
    preset_( static_cast<bool>(conf.I("preset")) ),
    tutorial_( conf.exist("tutorial") ? static_cast<bool>(conf.I("tutorial")) : false )
{
    reset_size();
    setup_color_chances();

    if( preset_ ) {
        if( conf.exist("preset_data") ) {
            for( int i = 0 ; i < width_ ; ++i ) {
                preset_data_.push_back( conf.V("preset_data").I(i) );
            }
        } else {
            for( int i = 0 ; i < width_ ; ++i ) {
                preset_data_.push_back( (i % color_amounts_) + 1 );
            }
        }
    }
}

MapSetting::pointer_type MapSetting::clone() const {
    pointer_type result = MapSetting::create();
    result->color_amounts(color_amounts_)
           .chain_amounts(chain_amounts_)
           .starting_line(starting_line_)
           .chaining_duration(chaining_duration_)
           .cube_dying_duration(cube_dying_duration_)
           .cube_dropping_duration(cube_dropping_duration_)
           .warning_check_delay(warning_check_delay_)
           .sink_speed(sink_speed_)
           .sink_speed_add(sink_speed_add_)
           .sink_speed_limit(sink_speed_limit_)
           .drop_speed(drop_speed_)
           .damage_factor(damage_factor_)
           .width(width_)
           .height(height_)
           .dropping_creatable(dropping_creatable_)
           .garbage_dumpable(garbage_dumpable_)
           .use_broken_as_garbage(use_broken_as_garbage_)
           .warning_gap(warning_gap_)
           .negate_damage_factor(negate_damage_factor_)
           .drop_normal_chance(drop_normal_chance_)
           .rez_chances(rez_chances_)
           .preset(preset_)
           .preset_data(preset_data_)
           .tutorial(tutorial_);
    return result;
}

MapSetting& MapSetting::apply_player_passive_mods(utils::map_any const& conf) {
    setup_color_chances( conf.M("restore") );

    warning_gap_          = conf.I("warning_gap");
    damage_factor_        = conf.F("damage_factor");
    negate_damage_factor_ = conf.F("negate_damage_factor");
    drop_normal_chance_   = conf.I("drop_normal_chance");

    return *this;
}

MapSetting& MapSetting::setup_color_chances(utils::map_any const& conf) {
    setup_color_chances();
    utils::map_any::const_iterator end = conf.end();
    if( conf.find("b")  != end && rez_chances_.size() > 0 ) rez_chances_[0] *= conf.F("b");
    if( conf.find("g")  != end && rez_chances_.size() > 1 ) rez_chances_[1] *= conf.F("g");
    if( conf.find("r")  != end && rez_chances_.size() > 2 ) rez_chances_[2] *= conf.F("r");
    if( conf.find("y")  != end && rez_chances_.size() > 3 ) rez_chances_[3] *= conf.F("y");
    if( conf.find("rb") != end && rez_chances_.size() > 4 ) rez_chances_[4] *= conf.F("rb");
    if( conf.find("gb") != end && rez_chances_.size() > 5 ) rez_chances_[5] *= conf.F("gb");

    //normalize back to 100.0 percentage
    double total = 0.0;
    for( size_t i = 0; i < rez_chances_.size() ; ++i ) {
        total += rez_chances_[i];
    }
    for( size_t i = 0; i < rez_chances_.size() ; ++i ) {
        rez_chances_[i] *= 100.0 / total;
    }

    return *this;
}

MapSetting& MapSetting::setup_color_chances() {
    double avg = 100.0 / color_amounts_;
    rez_chances_.clear();
    for( int i = 0; i < color_amounts_; ++i ) {
        rez_chances_.push_back( avg );
    }
    return *this;
}
