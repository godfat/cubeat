
#include "model/Cube.hpp"
#include "model/Chain.hpp"
#include "model/state/State.hpp"
#include "model/state/Waiting.hpp"
#include "model/state/Exploding.hpp"
#include "model/state/Dropping.hpp"
#include "model/state/Dying.hpp"
#include "model/state/Sinking.hpp"

#include "EventDispatcher.hpp"
#include "ctrl/TimerDispatcher.hpp"

#include "all_fwd.hpp"

<%= debug_include %>

using namespace psc;
using namespace model;
using namespace state;
using std::tr1::dynamic_pointer_cast;

bool <% debug_hook 'Cube::cycle_and_die' do %>(time_t const& now_t, time_t const& last_t){
<% end %>
    if(state_) state_->cycle(now_t, last_t);
    return is_dead();
}

Cube& <% debug_hook 'Cube::be_garbage' do %>(){
<% end %>
    is_garbage_ = true;
    hp_ = 3;
    color_id(-1);
    be_garbage_event()();
    return *this;
}

// begin only used by Map::next_state
pWaiting Cube::is_waiting(){ return dynamic_pointer_cast<Waiting>(state_); }
pDropping Cube::is_dropping(){ return dynamic_pointer_cast<Dropping>(state_); }
cpDying Cube::is_dying() const{ return dynamic_pointer_cast<Dying>(state_); }
cpSinking Cube::is_sinking() const{ return dynamic_pointer_cast<Sinking>(state_); }

void <% debug_hook 'Cube::drop_a_block' do %>(){
<% end %>
    y(y()-1);
    map()->update_cube_position(self(), x(), y()+1);
    //if( is_sinking() )
    //    sink_a_block_event()();
    //else {
    //    drop_a_block_event()();
    //}
}

void Cube::drop_a_frame(time_t const& now_t, time_t const& last_t){
    if( !is_new_garbage() ) {
        real_y(real_y() - (map()->ms()->drop_speed() * static_cast<double>(now_t - last_t) / 1000.0 ));
        update_pos_event()();
    }
}

void Cube::sink_a_frame(time_t const& now_t, time_t const& last_t){
    if( !is_new_garbage() ) {
        real_y(real_y() - (map()->get_sink_speed() * static_cast<double>(now_t - last_t) / 1000.0 ));
        update_pos_event()();
    } else {
        if( entry_progress() < 64.0 ) {
            entry_progress( entry_progress() + map()->get_sink_speed() * static_cast<double>(now_t - last_t) / 1000.0 );
        } else {
            new_garbage(false);
        }
        normal_entry_event()();
    }
}

bool Cube::arrived_at_logical_y(){
    return real_y() < y()*64.0;
}

void Cube::adjust_real_y(){
    real_y(y()*64.0);
    update_pos_event()();
}

void Cube::chain(pChain chain, time_t const& visual_delay) {
    chain_belonged_to_ = chain;
    time_to_lose_chain_ = map()->ms()->chaining_duration();
    // Truth is, we have to account for cube_dying_duration because
    // all effectively tagged cubes will waste its time waiting for
    // the original chained-to-die cubes below
    if( visual_delay != 0 ) {
        ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(get_chain_event(), self(), visual_delay);
    } else {
        get_chain_event()();
    }
}

void Cube::losing_chain(time_t const& elapsed_t){
    if( time_to_lose_chain_ == 0 || retain_chain_ == true ) return;
    if( time_to_lose_chain_ <= elapsed_t ) {
        time_to_lose_chain_ = 0;
        lose_chain();
    } else {
        time_to_lose_chain_ -= elapsed_t;
        losing_chain_event()( static_cast<double>( time_to_lose_chain_ ) /
                             (map()->ms()->chaining_duration()) );
    }
}

void <% debug_hook 'Cube::lose_chain' do %>(){
<% end %>
    if( chain() /*&& map()->cube_can_lose_chain(self())*/ ){
        SimpleCube::lose_chain();
        lose_chain_event()();
    }
}
// end

void <% debug_hook 'Cube::next_state' do %>(){
<% end %>
    if( state_.use_count() != 0 ) //2011.3.30 added this check because this might still be called by timer
        state_->next_state();     //however when you go exploding or dying this will already be reset.
}

// only used by OneFading::fade
void <% debug_hook 'Cube::go_dying' do %>(int dying_chain_step){
<% end %>
    state_ = state::Dying::create(self(), dying_chain_step);
    go_dying_event()(color_id());
}

int Cube::dying_chain_step() const {
    if( state::cpDying dying = is_dying() ) {
        return dying->dying_chain_step();
    }
    else {
        printf("\n\n in Cube(%d,%d)::dying_chain_step(): DA FAQ? Impossible Flow.\n\n\n", x(), y());
        fflush(stdout);
        return 0;
    }
}

Cube& <% debug_hook 'Cube::go_dropping' do %>(){
<% end %>
    state_ = state::Dropping::create(self());
    return *this;
}

Cube& <% debug_hook 'Cube::go_sinking' do %>(){
<% end %>
    state_ = state::Sinking::create(self());
    return *this;
}

void <% debug_hook 'Cube::go_exploding' do %>(int dmg){
<% end %>
    if( is_dying() )
        return; // don't explode me while i am dying!!

    else if( hp_ - dmg > 0) {
        hp_ -= dmg;
        hit_event()(dmg, hp_); // damage, hp left
    }
    else{
        state_.reset();

        printf(" map %d cube(%d,%d)(color: %d) is exploded.\n", map()->id(), x(), y(), color_id());

        map()->cubes_cleared_add(color_id());
        go_exploding_event()(color_id());
    }
}

void Cube::ending(int time_delay){
    if( is_dying() ) return;

    is_broken_ = true;
    color_id(-1);

    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
        std::tr1::bind(ending_event(), time_delay), self(), time_delay);
}

void <% debug_hook 'Cube::be_broken' do %>(int){
<% end %>
    if( is_dying() ) return;

    is_broken_ = true;
    //color_id(-1);
    //be_broken_event()();

    //2014.12: Cube should not decide its color on its own.

    //color_id( utils::distributed_random( map()->ms()->rez_chances() ) + 1 );
    be_broken_event()(color_id());
}

void <% debug_hook 'Cube::restore' do %>(int){
<% end %>
    //color_id(utils::random(map()->ms()->color_amounts())+1);

    //2014.12: Cube should not decide its color on its own.

    //color_id( utils::distributed_random( map()->ms()->rez_chances() ) + 1 );
    restore_internal();
}

void Cube::restore_to(int color){
    color_id( color );
    restore_internal();
}

void Cube::restore_internal(){
    is_broken_ = false;
    if( state::pWaiting w = is_waiting() ) w->uncheck();
    restore_event()(color_id());

    printf(" map %d cube(%d,%d) is restored to %d\n", map()->id(), x(), y(), color_id());
}
