
#include "data/Color.hpp"
#include "presenter/Map.hpp"
#include "presenter/Cube.hpp"
#include "model/Map.hpp"
#include "model/Cube.hpp"
#include "model/OneFading.hpp"
#include "model/state/Waiting.hpp"
#include "model/state/Dropping.hpp"
#include "model/state/Dying.hpp"
#include "model/detail/MapUtils.hpp"

#include "utils/Random.hpp"
#include "utils/ChainChecker.hpp"
#include "utils/vector_2d.hpp"

#include <boost/lambda/lambda.hpp>
#include <boost/foreach.hpp>
#include <boost/function.hpp> // workaround for gcc43...

#include <algorithm>
#include <cmath>
#include <utils/Logger.hpp>

<%= debug_include %>

using namespace psc;
using namespace model;

<% debug_hook 'Map::~Map' do %>() {<%end%>}

pMap <% debug_hook 'Map::init' do %>() { <%end%>
    cubes_.resize(map_setting_->width(), map_setting_->height());
    self_          = std::tr1::static_pointer_cast<Map>( shared_from_this() );
    //warning_level_ = std::tr1::shared_ptr<int>(new int(0));
    return self();
}

Map& <% debug_hook 'Map::init_cubes' do %>(){
<% end %>
    using boost::lambda::_1; // this would be used in for_each for element
    using boost::lambda::_2; // this would be used in for_each for x
    using boost::lambda::_3; // this would be used in for_each for y
    int width = ms()->width(); //, height = ms()->height();
    utils::vector_2d<int> cube_colors(width, ms()->starting_line());

    int const one_color_amounts = std::ceil(
        static_cast<double>(width)*ms()->starting_line()/ms()->color_amounts()
    );
    utils::for_each(cube_colors, _1 = (_2+_3*width)/one_color_amounts + 1);

    utils::ChainChecker::until_no_chained_cubes(cube_colors, ms()->chain_amounts());

    return init_cubes(cube_colors);
}

Map& <% debug_hook 'Map::init_cubes' do %>(color_map_type const& cube_colors){
<% end %>
    presenter::pMap owner = owner_.lock();
    int width = cube_colors.width(), height = cube_colors.height();
    for(int y=0; y<height; ++y)
        for(int x=0; x<width; ++x)
            if(cube_colors[x][y] == 0)
                continue;
            else {
                insert_cube( owner->make_cube(x, y, cube_colors[x][y])->model() );
            }

    fill_preview_queue(); // added

    //This point should be the end of the last init step, so start timing now:
    last_t_ = ctrl::EventDispatcher::i().get_timer_dispatcher("game")->get_time();

//demo branch: don't use this yet
//    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
//        std::tr1::bind(&Map::check_one_fadings, this), shared_from_this(), 500, -1);

    return *this;
}

void <% debug_hook 'Map::cycle_cubes' do %>(){
<% end %>
    using namespace std::tr1::placeholders;
    utils::for_each_ignore_null(cubes_, std::tr1::bind(&Map::cycle_a_cube, this, _1, _2, _3));
}

void Map::check_one_fadings() {
    using namespace std::tr1::placeholders;
    utils::for_each_ignore_null(cubes_, std::tr1::bind(&Map::check_a_fade, this, _1, _2, _3));
}

void <% debug_hook 'Map::cycle_a_cube' do %>(pCube c, int x, int y){
<% end %>
    if( !c->has_grounded() ){
        dropping_creatable_ = false;
        if( !c->is_garbage() && !c->is_broken() ) garbage_dumpable_ = false;
    }
    if( c->cycle_and_die(now_t_, last_t_) ) {
        cubes_[x][y].reset();
        owner_.lock()->release(c);
    }
}

void Map::check_a_fade(pCube c, int x, int y)
{
    if( state::pWaiting waiting = c->is_waiting() ){
        if( waiting->need_check() ){
            c->set_grounded(); // once grounded, always grounded
            pOneFadingOrig one_fading = make_OneFading(c);

            if( one_fading ){
                one_fading->fade(*this, c);
                c->go_dying();
            }
            else waiting->checked();
        }
    }
}

Map& <% debug_hook 'Map::insert_cube' do %>(pCube cube){
<% end %>
    cubes_[cube->x()][cube->y()] = cube;
    return *this;
}

Map& <% debug_hook 'Map::insert_garbage' do %>(pCube cube){
<% end %>
    if( ms()->use_broken_as_garbage() ) {
        cube->be_broken(0);
        cube->go_dropping();
    }
    else
        cube->be_garbage().go_dropping();

    cube->new_garbage(true);
    cube->garbage_fly_event()();

    //add restoration here for passive ability
    if( utils::random(100) < ms()->drop_normal_chance() ) {
        cube->restore(1); // ok?
    }

    return insert_cube(cube);
}

Map& <% debug_hook 'Map::insert_preview' do %>(pCube cube){
<% end %>
    cubes_preview_.push_back(cube);
    return *this;
}

Map& <% debug_hook 'Map::update_cube_position' do %>(pCube cube, int old_x, int old_y){
<% end %>
    cubes_[cube->x()][cube->y()] = cube;
    cubes_[old_x][old_y].reset();
    return *this;
}

// used Waiting::cycle
state::pState <% debug_hook 'Map::next_state' do %>(pCube cube){
<% end %>
    if( is_below_empty(cube) ){
        cube->drop_a_block(); // NOTE UPDATED: As a matter of fact, you have to drop the cube here,
                              // to make the flow more clear in one place and more flexible for some
                              // unexpected situation. To avoid floating point determinism problem,
                              // we have to make some cube NOT drop a block sometimes, but keep the state
                              // dropping.
        if( cube->is_dropping() )
            return state::pState();
        else
            return state::Dropping::create(cube);
    }
    else{
        if( cube->is_waiting() )
            return state::pState();
        else if( cube->y() > 0 && cubes_[cube->x()][cube->y()-1]->is_dropping() ) {
            std::cout << "cube (" << cube->x() << ", " << cube->y() << "): pass through bug.\n";
            std::cout << "cube states: " << is_below_empty(cube) << ", " << cube->is_broken() << ", " << cube->is_new_garbage() << ", " << cube->is_dropping() << "\n";
            pCube cbel = cubes_[cube->x()][cube->y()-1];
            std::cout << "cbelow stat: " << is_below_empty(cbel) << ", " << cbel->is_broken() << ", " << cbel->is_new_garbage() << ", " << cbel->is_dropping() << "\n";
            //forcefully correction of y position
            double bry = cbel->real_y();
            cube->real_y( bry - 65.0 ); //deliberately 64 + 1
            return state::pState();
        }
        else {
            cube->adjust_real_y();
//            std::cout << "cube " << cube << " becomes waiting.\n";
            return state::Waiting::create(cube);
        }
    }
    //std::cout << "Map::next_state impossible flow.\n";
    return state::pState();
}

Map& <% debug_hook 'Map::cycle' do %>(){ <% end %>

    last_t_ = now_t_;
    now_t_ = ctrl::EventDispatcher::i().get_timer_dispatcher("game")->get_time();

    // 2012 note: This cycle is getting bigger and bigger. I should refactor it to event-based style
    // e.g:
    // at init or some other specific point, not in the model loop:
    // if( ms()->garbage_dumpable && ms()->dropping_creatable() )
    //     add_task( "cycle_warning", model::Map::cycle_warning );
    //
    // and you can add/remove this task dynamically.
    // same for cycle_creation_garbage && cycle_creation.
    // the point is, only change task when the state changes,
    // when no state changes between each loop, no task is add or removed.
    // and then model::Map will execute tasks by a certain priority.
    // like, cycle_warning > cycle_creation_garbage > cycle_creation

    if( last_t_ == now_t_ ) return *this; //if time is not changed, then cycle should be stopped;

    garbage_dumpable_ = ms()->garbage_dumpable();
    dropping_creatable_ = ms()->dropping_creatable();
    if( garbage_dumpable_ && dropping_creatable_ ) {
        cycle_warning();
    }
    else {
        warning_level_.reset();
        alarm_sound_.reset();
    }

    update_chains();
    cycle_cubes();
    check_one_fadings();

    // 2012 note: setup a state to alter garbage_dumpable_ && dropping_creatable_ here
    // not ms()->dropping_creatable(). it will affect cycle_warning().
    if( lock_dropping_ ) {
        garbage_dumpable_   = false;
        dropping_creatable_ = false;
    }

    if( garbage_dumpable_ && garbage_left_ >= 1 ) { // garbage_left_ is double here, ignore some epslion.
        cycle_creation_garbage();
    }
    else if( dropping_creatable_ ) {
        cycle_creation();
    }

    return *this;
}

///////////////////////////////////////////////////////////////////////////////

// resolve the chain on the cube
void <% debug_hook 'Map::attach_chain_bottom_up_from' do %>(int in_x, int in_y, pChain chain){
<% end %>
    // start chainging
	for(int x=in_x, y=in_y;
        cubes_[x][y].use_count() != 0 && //if it's alive
        cubes_[x][y]->is_waiting() &&    //if it's at waiting state
		cubes_[x][y]->chain().use_count() == 0 //and if it has a chain property
		; ++y)
    {
        cubes_[x][y]->chain(chain);
    }
}

// create a one fading through that cube,
// find the cubes in this one fading with make_clist
pOneFadingOrig <% debug_hook 'Map::make_OneFading' do %>(pCube that){
<% end %>
    cube_list_type traveled, not_traveled, result;
    not_traveled.insert(that);
    detail::make_clist<Map>(cubes_, traveled, not_traveled, result, ms()->chain_amounts());
    return result.size() ? OneFadingT<Map>::create( result ) : pOneFadingOrig();
}

bool <% debug_hook 'Map::is_below_empty' do %>(cpCube that) const{
<% end %>
    if( that->y() == 0 ) return false;
    else return cubes_[that->x()][that->y()-1].use_count() == 0;
    // throw "impossible flow!";
    return false;
}

// all cubes share the same column with that lose the chain
bool <% debug_hook 'Map::cube_can_lose_chain' do %>(cpCube that) const{
<% end %>
	for( int x = that->x(), y = that->y()-1; y >= 0; --y ) {
	    if( cubes_[x][y].use_count() == 0 ||
	        cubes_[x][y]->is_dying() /*|| cubes_[x][y]->is_exploding()*/ )
	    {
	        // when it's empty, dying or exploding, the square ontop can't lose chain
	        return false;
	    }
	}
	return true;
}

static void delay_adder(int& be_added_to, int amount) { be_added_to += amount; }
static void delay_suber_and_throw_garbage(int& be_subed_from, std::tr1::function<void(double)> cb, int amount, double actual_amount)
{
    be_subed_from -= amount;
    cb(actual_amount);
}

void <% debug_hook 'Map::update_chains' do %>(){
<% end %>
    using std::tr1::bind; using std::tr1::ref; using namespace std::tr1::placeholders;



    //int!? INT!? INTEGER!??????????
    //ARE YOU FUCKING SERIOUS????????????

    //int damage_factor = ms()->damage_factor();

    double damage_factor = ms()->damage_factor();


    presenter::pMap o = owner();

//    if( !chains_.empty() )
//        std::cout << "map: " << this << "\n";

    for(chain_list_type::iterator i=chains_.begin(); i != chains_.end();)
    {
        // when the Chain's rear is not zero we notify to add a new combo
        if( (*i)->last_step_amounts() != 0 ){
            (*i)->update_power_factor();
            // damage_factor adjustment (1.00 ~ 2.00)
            int amount = (*i)->attack_of_current_step(); // it is just superficial effects, so don't use damage_factor here.
            //current_sum_of_attack_ += (*i)->attack_of_current_step()*damage_factor;
            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(&delay_adder, ref(current_sum_of_attack_), amount), self(), 1000);
            o->new_chain_event()(*i);
            o->new_garbage_event()(*i, amount);
            // o->garbage_animation( amount, (*i)->last_step_x(), (*i)->last_step_y() );
            // damage_factor adjustment (1.00 ~ 2.00)
            score_ += (*i)->score_step(); // 2012 note: damage_factor should not affect score
            (*i)->step_one();
        }

        // when the Chain's all dead then we fire up the attack and make this one null
        //std::cout << "  chain " << (*i) << " use count: " << (*i).use_count() << "\n";

        if( (*i).use_count() == 1 ){
            // damage_factor adjustment (1.00 ~ 2.00)
            int amount = (*i)->power_factor();
            double actual_amount = amount * damage_factor;
            //current_sum_of_attack_ -= amount;
            //o->throw_garbage( amount );
            std::tr1::function<void(double)> func = bind(&presenter::Map::throw_garbage, o.get(), _1);
            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(&delay_suber_and_throw_garbage, ref(current_sum_of_attack_), func, amount, actual_amount),
                self(),
                850); // do we still need 1000 here? see ViewMaster::new_garbage, there's a correspondence in duration.
            i = chains_.erase(i);
        }
        else{
            ++i;
        }
    }
}

void Map::push_garbage(double amounts)
{
    garbage_left_ += amounts;
}

void <% debug_hook 'Map::cycle_creation_garbage' do %>(){
<% end %>
    std::vector< std::vector<int> > row_empty;
    int top = ms()->height()-1;
    // check empty columns
    for( int y=top-1, i = 0; y >= 0; --y, ++i ) {
        row_empty.push_back( std::vector<int>() );
        for( int x=0, width=ms()->width(); x < width; ++x ) {
            if( !cubes_[x][y+1] && !cubes_[x][y] ) {
                row_empty[i].push_back( x );
            }
        }
        if( row_empty[i].size() < 1 ) {
            //ok, we go from top, and now we've encountered first row without any hole
            break;
        }
    }
    //so here you have a upside-down view of where to drop the garbages.

    // shuffle all the vectors
    for( unsigned int i = 0; i < row_empty.size(); ++i ) {
        std::random_shuffle(row_empty[i].begin(), row_empty[i].end());
    }

    // drop them according to the empty column
    presenter::pMap owner = owner_.lock();
    presenter::pMap main_enemy = owner->garbage_lands().front().lock();
    int this_frame_lands = 0;
    for( unsigned int j = 0; j < row_empty.size(); ++j ) {
        //CORRECTED: actually, we don't want to do it upside-down.
        //printf("garbage_left_: %d, emptyness of row %d (from top): %d\n", garbage_left_, j, row_empty[j].size());

        //garbage_left_ is double here. The remainder of less than 1 garbage_left_ will be kept for future use.
        for( unsigned int i=0; i < row_empty[j].size() && garbage_left_ >= 1 ; ++i ){
            int x = row_empty[j][i];

            pCube c = owner->make_garbage( x, top - j )->model();
            insert_garbage( c );

            garbage_left_ -= 1; //garbage_left_ is double here.
            ++this_frame_lands;
        }
    }
    //2012.05 self garbage_left_ minus n,
    //means garbage effects that the opponent has to minus n
    main_enemy->pop_garbage_event()(this_frame_lands);

    if( this_frame_lands > 0 && garbage_left_ < 1 ) { //if garbage is actually less then 1, just pop all garbage animations
        // ok, but there's a problem with this method:
        // garbages in the delay_adder ( 1 sec delay, and the first second of flying animation )
        // will not account for this_frame_lands, but they will get deleted as well...
        // however the attacking amount seems to be correct.
        main_enemy->pop_garbage_event()(9999);
    }
}

void <% debug_hook 'Map::cycle_creation' do %>(){
<% end %>
    // we must check which column's top is empty when drop squares
    // so we setup an array of columns which its top is empty
    int top = ms()->height()-1;
    std::vector<int> is_empty, not_empty;
    for( int x=0, width = ms()->width(); x < width; ++x )
        if( !cubes_[x][top] && !cubes_[x][top-1] )
            is_empty.push_back(x);
        else
            not_empty.push_back(x);

    if( is_empty.size() == 0 ) return;

    BOOST_FOREACH(int x, is_empty){
        cubes_preview_[x]->x(x).y(top).go_sinking();
        insert_cube(cubes_preview_[x]);
    }

    presenter::pMap owner = owner_.lock();
    BOOST_FOREACH(int x, not_empty){
        owner->release(cubes_preview_[x]);
    }

    fill_preview_queue();
}

void <% debug_hook 'Map::fill_preview_queue' do %>(){
<% end %>
    cubes_preview_.clear();
    int unsigned width = ms()->width();
    std::vector<double> const& rez_chances = ms()->rez_chances();
    std::vector<int> preview_set; // color set
    preview_set.push_back( utils::distributed_random( rez_chances ) + 1 );

    if( utils::random(2) ) // need two?
        preview_set.push_back(preview_set.front());

    while( preview_set.size() != width ){
        int color = fill_preview_create_color(preview_set);
        if( width - preview_set.size() == 1 ){
            preview_set.push_back(color);
        }
        else{
            if( utils::random(2) ){
                preview_set.push_back(color);
                preview_set.push_back(color);
            }
            else{
                preview_set.push_back(color);
            }
        }
    }

    presenter::pMap owner = owner_.lock();
    for( int unsigned x=0; x != width ; ++x )
        cubes_preview_.push_back( owner->make_cube_preview(preview_set[x])->model() );
}

int <% debug_hook 'Map::fill_preview_create_color' do %>(std::vector<int>& preview_set){
<% end %>
    int color/*, color_amounts = ms()->color_amounts()*/;
    std::vector<double> const& rez_chances = ms()->rez_chances();
    do{
        //color = utils::random( color_amounts )+1;
        color = utils::distributed_random( rez_chances ) + 1;
    } while ( color == preview_set.back() );
    return color;
}

Map::color_map_type <% debug_hook 'Map::color_map' do %>() const{
<% end %>
    int width = ms()->width(), height = ms()->height();
    color_map_type result(width, height);
    for(int y=0; y<height; ++y)
        for(int x=0; x<width; ++x)
            if(cubes_[x][y])
                result[x][y] = cubes_[x][y]->color_id();
    return result;
}

// temp
void Map::inc_warning(int& warning_lv) {
    if( column_full_num_ && chains_.empty() && warning_lv < 100 )
        warning_lv += 1;
//    else if( !column_full_num_ && warning_lv > 0 ) {
//        warning_lv -= 2;
//        if( warning_lv < 0 )
//            warning_lv = 0;
//    }
// 2012 note: separate inc_warning and dec_warning for different countdown speed control
}

void Map::dec_warning(int& warning_lv) {
    if( !column_full_num_ && warning_lv > 0 ) {
        warning_lv -= 2;
        if( warning_lv < 0 )
            warning_lv = 0;
    }
}

// added: split warning check from cycle_creation:
void <% debug_hook 'Map::cycle_warning' do %>(){
<% end %>
    using std::tr1::bind; using std::tr1::ref;

    column_full_num_ = column_full_num();
    int warning_gap  = ms()->warning_gap();

    if( !column_full_num_ ) {
        if( warning_level_ && *warning_level_ == 0 )
            warning_level_.reset();
        alarm_sound_.reset();
    }
    //else if( column_full_num_ && !warning_level_ ) {
    else {
        if( !warning_level_ ) {
            warning_level_ = std::tr1::shared_ptr<int>(new int(0));

            owner()->warning_counting_event()(0); //added for call warning as soon as column full
            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(&Map::inc_warning, this, ref(*warning_level_)), warning_level_, warning_gap / 20, -1);

            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(&Map::dec_warning, this, ref(*warning_level_)), warning_level_, 50u, -1);

            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(owner()->alert_bar_update_event(), ref(*warning_level_)), warning_level_, 50u, -1);
        }
        if( !alarm_sound_ ) {
            alarm_sound_   = std::tr1::shared_ptr<int>(new int(0));

            ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
                bind(owner()->warning_counting_event(), ref(*warning_level_)), alarm_sound_, warning_gap, -1);
        }
    }

    if( warning_level_ && *warning_level_ >= 100 && owner()->lose_event() ) {
        ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
            owner()->lose_event(), warning_level_, 10u);
    }
}

// note/NOTE/WTF/temp: WHY? it is just a getter-like function, why have this emit events???
// VERY DANGEROUS.
int <% debug_hook 'Map::column_full_num' do %>() const{
<% end %>
    int counter = 0;
    for( int x=0, width = ms()->width(), y = ms()->height()-2; x < width; ++x ){
        if( cubes_[x][y] && cubes_[x][y]->is_waiting() ){
            ++counter;
            owner()->column_full_event()(x);
        }
        else owner()->column_not_full_event()(x);
    }
    return counter;
}

int Map::garbage_count() const {
    int num = 0;
    for( int x=0; x < ms()->width(); ++x )
        for( int y=0; y < ms()->height(); ++y )
            if( pCube c = cubes_[x][y] )
                if( c->is_broken() || c->is_garbage() )
                    ++num;
    return num;
}

int Map::grounded_cube_count() const {
    int num = 0;
    for( int x=0; x < ms()->width(); ++x )
        for( int y=0; y < ms()->height(); ++y )
            if( pCube c = cubes_[x][y] )
                if( c->has_grounded() )
                    ++num;
    return num;
}

bool Map::all_empty() const {
    for( int x=0; x < ms()->width(); ++x ) {
        for( int y=0; y < ms()->height(); ++y ) {
            if( cubes_[x][y] ) return false;
        }
    }
    return true;
}

bool Map::all_waiting() const {
    for( int x=0; x < ms()->width(); ++x ) {
        for( int y=0; y < ms()->height(); ++y ) {
            if( cubes_[x][y] ) {
                state::pWaiting w = cubes_[x][y]->is_waiting();
                if( !w || w->need_check() )
                    return false;
            }
        }
    }
    return true;
}

double Map::get_sink_speed() const {
    if( owner()->hasting_cond()() ) //hasting_cond is a delegated function
        return ms()->drop_speed();
    else
        return ms()->sink_speed();
}

void Map::set_garbage_amount(int const& n) {
    garbage_left_ = n;
}

void Map::foreach(std::tr1::function<void(pCube&, int, int)> f) {
    utils::for_each_ignore_null(cubes_, f);
}

bool sort_by_second_gte(std::pair<int, int> const& a, std::pair<int, int> const& b)
{
    return a.second >= b.second;
}

std::vector< std::pair<int, int> > Map::count_colors() const{
    std::vector< std::pair<int, int> > ret;
    for( int i = 0; i < data::Color::MAX; ++i ) {
        ret.push_back( std::make_pair(i, 0) );
    }
    for( int x = 0; x < ms()->width(); ++x ) {
        for( int y = 0; y < ms()->height() - 1; ++y ) {
            pCube c = cubes_[x][y];
            if( c && !c->is_dying() ) {
                ret[ c->color_id() ].second += 1;
            }
        }
    }
    std::sort(ret.begin(), ret.end(), sort_by_second_gte);
    return ret;
}

bool Map::exist(int x, int y) const
{
    return !!cubes_[x][y];
}

void Map::for_row(int r, std::tr1::function<void(model::pCube&, int, int)> f)
{
    for( int x = 0; x < ms()->width(); ++x )
        apply_func_at(x, r, f);
}

void Map::apply_func_at(int x, int y, std::tr1::function<void(model::pCube&, int, int)> f)
{
    if( cubes_[x][y] )
        f(cubes_[x][y], x, y);
}

std::vector< data::pCube > Map::clone_linear_data() const
{
    std::vector< data::pCube > ret;
    for( int x = 0; x < ms()->width(); ++x ) {
        for( int y = 0; y < ms()->height() - 1; ++y ) {
            pCube c = cubes_[x][y];
            if( c && !c->is_dying() ) {
                ret.push_back( data::Cube::create(c->x(), c->y(), c->color_id()) );
            }
        }
    }
    return ret;
}

bool Map::below_is_dropping(int x, int y) const
{
    return y > 0 && cubes_[x][y-1]->is_dropping();
}

pSimpleMap Map::dump_data() const
{
    data::pMapSetting cloned_ms = map_setting_->clone();
    //data::pMapSetting cloned_ms = data::MapSetting::create();

    pSimpleMap result = SimpleMap::create(
        cloned_ms, garbage_left_, score_, current_sum_of_attack_, warning_level_);

    chain_list_type temp_chains;

    for(chain_list_type::const_iterator i=chains_.begin(); i != chains_.end(); ++i) {
        pChain chain = Chain::create( *i );
        temp_chains.push_back( chain );
        result->push_chain( chain );
    }

    SimpleMap::preview_list_type temp_preview;

    for(preview_list_type::const_iterator i=cubes_preview_.begin(); i != cubes_preview_.end(); ++i) {
        pSimpleCube c = SimpleCube::create(-1, -1, (*i)->color_id());
        temp_preview.push_back(c);
    }
    SimpleMap::dump_preview_to(result, temp_preview);

    for( int x=0; x < ms()->width(); ++x ) {
        for( int y=0; y < ms()->height(); ++y ) {

            if( pCube orig_c = cubes_[x][y] ) {
                if( orig_c->is_dying() ) continue; //don't copy dying cubes.

                pSimpleCube c = orig_c->dump_data_to_map(result);

                if( orig_c->chain() ) {
                    chain_list_type::const_iterator j = temp_chains.begin();
                    for( chain_list_type::const_iterator i = chains_.begin(); i != chains_.end(); ++i, ++j )
                    {
//                        if( (*i).use_count() <= 1 ) //if this chain isn't held by any cubes,
//                            continue;               //then skip it
                        if( (*i) == orig_c->chain() )
                            break; //found the correct chain from the original chain list, break loop
                    }
                    //so, when we are at here, we can make sure j point to a valid and correct chain
                    //which we created just not so long ago, since chains_ and temp_chains have the
                    //same order.
                    c->chain( *j ); //this chain iterator should always be vaild,
                    //because if no match was found, it means we've got a strange chain object
                    //in the cubes not recorded by the map's chain list, which is impossible.
                }
                SimpleMap::dump_cube_to(result, c);
            }
        }
    }
    return result;
}
