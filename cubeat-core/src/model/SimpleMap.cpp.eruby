
#include "model/SimpleMap.hpp"
#include "model/SimpleCube.hpp"
#include "model/Chain.hpp"
#include "model/OneFading.hpp"
#include "model/detail/MapUtils.hpp"
#include "utils/Logger.hpp"
#include <iostream>

using namespace psc;
using namespace model;
using utils::Logger;

SimpleMap::~SimpleMap()
{
    //Logger::i().buf(" simple map ").buf(this).buf(" destructing...").endl();
}

//protected
void SimpleMap::dump_cube_to(pSimpleMap dest, pSimpleCube c) const
{
    dest->simp_cubes_[c->x()][c->y()] = c;
}

//protected
void SimpleMap::dump_preview_to(pSimpleMap dest, preview_list_type const& cl) const
{
    dest->simp_cubes_preview_ = cl;
}

bool SimpleMap::is_below_empty(pSimpleCube cube) const
{
    if( cube->y() == 0 ) return false;
    else {
        for( int x = cube->x(), y = cube->y(); y >= 0; --y )
            if( simp_cubes_[x][y].use_count() == 0 )
                return true;
        //return simp_cubes_[cube->x()][cube->y()-1].use_count() == 0;
    }
    // throw "impossible flow!";
    return false;
}

void SimpleMap::update_cube_position(pSimpleCube cube, int old_x, int old_y)
{
    simp_cubes_[cube->x()][cube->y()] = cube;
    simp_cubes_[old_x][old_y].reset();
}

void SimpleMap::update_chains()
{
    int damage_factor = ms()->damage_factor();
    for(chain_list_type::iterator i=chains_.begin(); i != chains_.end(); )
    {
        // when the Chain's rear is not zero we notify to add a new combo
        if( (*i)->last_step_amounts() != 0 ){
            (*i)->update_power_factor();
            // damage_factor adjustment (1.00 ~ 2.00)
            int amount = (*i)->attack_of_current_step()*damage_factor;
            current_sum_of_attack_ += amount;
            // damage_factor adjustment (1.00 ~ 2.00)
            score_ += (*i)->score_step() * damage_factor;
            (*i)->step_one();
        }
        // when the Chain's all dead then we fire up the attack and make this one null
        if( (*i).use_count() == 1 ){
            // damage_factor adjustment (1.00 ~ 2.00)
            //int amount = (*i)->power_factor()*damage_factor;
            //current_sum_of_attack_ -= amount;
            i = chains_.erase(i);
        }
        else{
            ++i;
        }
    }
}

void SimpleMap::cycle_cubes()
{
    using namespace std::tr1::placeholders;
    using std::tr1::bind;
    utils::for_each_ignore_null(
        simp_cubes_, bind(&SimpleMap::cycle_a_cube, this, _1, _2, _3));
}

void SimpleMap::cycle_a_cube(pSimpleCube cube, int x, int y)
{
    if( is_below_empty(cube) )
        drop_cube_to_the_ground(cube);
    else {
        pOneFadingSimple one_fading = make_OneFading(cube);
        if( one_fading )
            one_fading->fade(*this, cube);
    }
    if( cube->cycle_and_die() )
        simp_cubes_[x][y].reset();
    else {
        cube->set_grounded();
        cube->lose_chain();
    }
}

void SimpleMap::drop_cube_to_the_ground(pSimpleCube cube)
{
    int x = cube->x(), old_y = cube->y(), y = old_y-1;
    for( ; y >= 0; --y )
        if( simp_cubes_[x][y] )
            break;

    cube->y( y+1 );
    update_cube_position(cube, x, old_y);
}

void SimpleMap::cleanup_map_and_drop_all()
{
    //start coding from here
}

bool SimpleMap::is_all_fallen() const {
    for( int x=0; x < ms()->width(); ++x )
        for( int y=1; y < ms()->height(); ++y )
            if( simp_cubes_[x][y] && !simp_cubes_[x][y-1] )
                return false;
    return true;
}

//NOTE: in SimpleMap, all the cubes are at waiting state.
void SimpleMap::attach_chain_bottom_up_from(int in_x, int in_y, pChain chain)
{
	for(int x=in_x, y=in_y;
        simp_cubes_[x][y].use_count() != 0 && //if it's alive
		simp_cubes_[x][y]->chain().use_count() == 0 //and if it has no chain property
		; ++y)
    {
        simp_cubes_[x][y]->chain(chain);
    }
}

// create a one fading through that cube,
// find the cubes in this one fading with make_clist
pOneFadingSimple SimpleMap::make_OneFading(pSimpleCube that)
{
    cube_list_type traveled, not_traveled, result;
    not_traveled.insert(that);
    detail::make_clist<SimpleMap>(simp_cubes_, traveled, not_traveled, result, ms()->chain_amounts());
    return result.size() ? OneFadingT<SimpleMap>::create( result ) : pOneFadingSimple();
}

int find_chain_index(SimpleMap::chain_list_type const& chains, pChain const& ch) {
    unsigned int result = 0;
    for(SimpleMap::chain_list_type::const_iterator i=chains.begin(); i != chains.end(); ++i) {
        ++result;
        if( (*i) == ch )
            break;
    }
    return result >= chains.size() ? 0 : result;
}

void SimpleMap::print_data_for_debug() const
{
    std::cout << "map-width:  " << map_setting_->width() << std::endl;
    std::cout << "map-height: " << map_setting_->height() << std::endl;
    std::cout << "garbage_left: " << garbage_left_ << std::endl;
    std::cout << "score:        " << score_ << std::endl;
    std::cout << "sum_of_attack:" << current_sum_of_attack_ << std::endl;
    std::cout << "num_of_chains:" << chains_.size() << std::endl;

    for(chain_list_type::const_iterator i=chains_.begin(); i != chains_.end(); ++i)
        std::cout << "  chain: " << (*i) << "  step: " << ((*i)->step()-1) << "  attack: " << (*i)->power_factor() << " use_count: " << (*i).use_count() << std::endl;

    std::cout << "\npreview_list: " << std::endl;

    for(preview_list_type::const_iterator i=simp_cubes_preview_.begin();
        i != simp_cubes_preview_.end(); ++i )
        std::cout << (*i)->color_id() << " ";
    std::cout << std::endl;

    std::cout << "\nmap-view: " << std::endl;

    for( int y = ms()->height()-1; y >= 0; --y ) {
        for( int x = 0; x < ms()->width(); ++x )
            if( simp_cubes_[x][y] ) {
                int ich = find_chain_index(chains_, simp_cubes_[x][y]->chain());
                char ch = (ich == 0 ? ' ' : ich+96 );
                int cid = simp_cubes_[x][y]->color_id() == -1 ? 9 : simp_cubes_[x][y]->color_id();
                printf("%c%d", ch, cid);
            }
            else printf("[]");
        std::cout << std::endl;
    }
    std::cout << std::endl;
}

pSimpleMap SimpleMap::clone() const
{
//    Logger::i().buf(this).buf(" started cloning ..").endl();
    data::pMapSetting cloned_ms = map_setting_->clone();

    //Logger::i().buf(this).buf(" checkpoint 1 ").endl();

    pSimpleMap result = SimpleMap::create(
        cloned_ms, garbage_left_, score_, current_sum_of_attack_, warning_level_);

    //Logger::i().buf(this).buf(" checkpoint 2: map ").buf(result).buf(" created via clone.").endl();

    chain_list_type temp_chains;
    for(chain_list_type::const_iterator i=chains_.begin(); i != chains_.end(); ++i) {
        pChain chain = Chain::create( *i );
        temp_chains.push_back( chain );
    }
    result->chains_ = temp_chains;
//
    //Logger::i().buf(this).buf(" checkpoint 3 ").endl();
//
    preview_list_type temp_preview;
    for(preview_list_type::const_iterator i = simp_cubes_preview_.begin();
        i != simp_cubes_preview_.end(); ++i)
    {
        //Logger::i().buf(this).buf(" is cloning preview cube ").buf(*i).endl();
        pSimpleCube c = SimpleCube::create(-1, -1, (*i)->color_id());
        temp_preview.push_back(c);
    }
    result->simp_cubes_preview_ = temp_preview;

    for( int x=0; x < ms()->width(); ++x ){
        for( int y=0; y < ms()->height(); ++y ){
            if( pSimpleCube orig_c = simp_cubes_[x][y] ) {
                pSimpleCube c = orig_c->dump_data_to_map(result);

                if( orig_c->chain() ) {
                    chain_list_type::const_iterator j = temp_chains.begin();
                    for( chain_list_type::const_iterator i = chains_.begin(); i != chains_.end(); ++i, ++j )
                    {
//                        if( (*i).use_count() <= 1 )   continue;
                        if( (*i) == orig_c->chain() ) break;
                    }
                    c->chain( *j );
                }
                result->simp_cubes_[x][y] = c;
            }
        }
    }
    return result;
}
