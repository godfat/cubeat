
#include "model/SimpleMap.hpp"
#include "model/SimpleCube.hpp"
#include "model/Chain.hpp"
#include "model/OneFading.hpp"
#include "model/detail/MapUtils.hpp"

<%= debug_include %>

using namespace psc;
using namespace model;

void SimpleMap::update_chains()
{
    //start coding from here
}

void SimpleMap::cycle_cubes()
{
    //start coding from here
}

void SimpleMap::cycle_a_cube(pSimpleCube cube, int x, int y)
{
    //start coding from here
}

void SimpleMap::cleanup_map_and_drop_all()
{
    //start coding from here
}

//NOTE: in SimpleMap, all the cubes are at waiting state.
void SimpleMap::attach_chain_bottom_up_from(int in_x, int in_y, pChain chain)
{
	for(int x=in_x, y=in_y;
        simp_cubes_[x][y].use_count() != 0 && //if it's alive
		simp_cubes_[x][y]->chain().use_count() == 0 //and if it has a chain property
		; ++y)
    {
        simp_cubes_[x][y]->chain(chain);
    }
}

// create a one fading through that cube,
// find the cubes in this one fading with make_clist
pOneFadingSimple SimpleMap::make_OneFading(pSimpleCube that)
{
    cube_list_type traveled, not_traveled, result;
    not_traveled.insert(that);
    detail::make_clist<SimpleMap>(simp_cubes_, traveled, not_traveled, result, ms()->chain_amounts());
    return result.size() ? OneFadingT<SimpleMap>::create( result ) : pOneFadingSimple();
}
