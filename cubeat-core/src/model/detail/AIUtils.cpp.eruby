
#include "model/detail/AIUtils.hpp"
#include "model/SimpleMap.hpp"
#include "model/SimpleCube.hpp"

#include <boost/thread/mutex.hpp>
#include <iostream>

namespace psc {
namespace model {
namespace ai_detail {

pSimpleMap AIUtils::clone_map(pSimpleMap const& map)
{
    return map->clone();
}

pSimpleCube AIUtils::find_keycube_for_highest_chain_power
    (pSimpleMap const& map, int lower_bound, int upper_bound, int em_level)
{
    pSimpleMap map_clone = map->clone();
    int highest_score = get_base_attack( map_clone ), current_score = 0;
    int incremental_lower_bound = lower_bound + highest_score;
    pSimpleCube best_cube;

    if( em_level > 0 ) { //temporary
        incremental_lower_bound = highest_score + 1;
        //temporary, these can actually be impl'ed at Lua side, and let Lua decide
        //when at emergency, one should use which value as incremental_lower_bound.
        //AIUtils::get_base_attack should be exported as well.
    }

//    std::cout << " -------------------------------------- " << std::endl;
//    std::cout << " current base attack: " << highest_score << std::endl;
//    std::cout << " -------------------------------------- " << std::endl;

    for( int y=map->ms()->height() - 1; y >= 0; --y ) {
        for( int x=0; x < map->ms()->width(); ++x ) {
            if( pSimpleCube c = map_clone->simp_cubes_[x][y] ) {
                current_score = simulate_fire_at( x, y, map_clone->clone() );
                if( current_score >= incremental_lower_bound &&
                    current_score <= upper_bound ) {
                    best_cube = c;
                    highest_score = current_score;
                }
//                std::cout << current_score << " ";
            }
//            else std::cout << "X ";
        }
//        std::cout << std::endl;
    }
//    std::cout << std::endl;
    return best_cube;
}

std::vector<pSimpleCube> AIUtils::find_garbages(pSimpleMap const& map)
{
    std::vector<pSimpleCube> garbages;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( pSimpleCube c = map->simp_cubes_[x][y] )
                if( c->is_garbage() && !map->is_below_empty(c) ) //don't count garbages in the air
                    garbages.push_back( c );

    return garbages;
}

std::vector<pSimpleCube> AIUtils::find_brokens(pSimpleMap const& map)
{
    std::vector<pSimpleCube> brokens;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( pSimpleCube c = map->simp_cubes_[x][y] )
                if( c->is_broken() && !map->is_below_empty(c) ) //don't count brokens in the air
                    brokens.push_back( c );

    return brokens;
}

//added these two for more directly interact with LuaJIT FFI interface.

pSimpleCube** AIUtils::find_garbages(pSimpleMap const& map, unsigned int* size_out)
{
    pSimpleCube** list = new pSimpleCube*[map->ms()->width() * map->ms()->height()];
    unsigned int size = 0;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( pSimpleCube c = map->simp_cubes_[x][y] )
                if( c->is_garbage() && !map->is_below_empty(c) ) { //don't count brokens in the air
                    list[size] = new pSimpleCube;
                    *(list[size]) = c;
                    ++size;
                }

    *size_out = size;
    return list;
}

pSimpleCube** AIUtils::find_brokens(pSimpleMap const& map, unsigned int* size_out)
{
    pSimpleCube** list = new pSimpleCube*[map->ms()->width() * map->ms()->height()];
    unsigned int size = 0;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( pSimpleCube c = map->simp_cubes_[x][y] )
                if( c->is_broken() && !map->is_below_empty(c) ) { //don't count brokens in the air
                    list[size] = new pSimpleCube;
                    *(list[size]) = c;
                    ++size;
                }

    *size_out = size;
    return list;
}

int AIUtils::cube_count(pSimpleMap const& map)
{
    int num = 0;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( map->simp_cubes_[x][y] )
                ++num;
    return num;
}

int AIUtils::grounded_cube_count(pSimpleMap const& map)
{
    int num = 0;
    for( int x=0; x < map->ms()->width(); ++x )
        for( int y=0; y < map->ms()->height(); ++y )
            if( pSimpleCube c = map->simp_cubes_[x][y] )
                if( c->has_grounded() )
                    ++num;
    return num;
}

//private
//returns chain's score sum
int AIUtils::simulate_fire_at(int x, int y, pSimpleMap cloned_map)
{
    //cloned_map->print_data_for_debug();
    kill(cloned_map, x, y);
    //cloned_map->print_data_for_debug();
    cloned_map->cycle();
    cloned_map->cycle(); //NOTE: why twice ???? possibly we update_chains first then cycle_cubes.
    //cloned_map->print_data_for_debug();
    bool did_trigger_chain = false;
    while( cloned_map->chains_.size() ) {
        cloned_map->cycle();
        did_trigger_chain = true;
    }
    //if there is chain going on, we will continue to cycle
    //if there is not, then end of game.
    return cloned_map->current_sum_of_attack_ + (did_trigger_chain?1:0);
    //did_trigger_chain flag is really artifical, because if we decide the most basic match won't produce attack
    //then the program cannot tell by current_sum_of_attack_ if there's actually a possible match,
    //since the attack sum will stay the same.
}

int AIUtils::get_base_attack(pSimpleMap cloned_map)
{
    cloned_map->cycle();
    do {
        cloned_map->cycle();
    } while( cloned_map->chains_.size() );
    return cloned_map->current_sum_of_attack_;
}

pSimpleCube AIUtils::lookup(pSimpleMap const& map, int x, int y)
{
    return map->simp_cubes_[x][y];
}

//This is definitely causing problem. SimpleCube doesn't know dropping/waiting,
//And if it's still dropping it can't be grounded for sure. But This function doesn't
//consider this...
pSimpleCube AIUtils::lookup_for_grounded(pSimpleMap const& map, int x, int y)
{
    if( pSimpleCube c = lookup(map, x, y) )
        return !map->is_below_empty(c) ? c : pSimpleCube();
    else return pSimpleCube();
}

bool AIUtils::still_chaining(pSimpleMap const& map)
{
    return map->chains_.size() > 0 ? true : false;
}

std::vector<int> AIUtils::find_high_column_indexes(pSimpleMap const& map, int threshold)
{
    std::vector<int> high_columns;
    for( int x = 0; x < map->ms()->width(); ++x ) {
        int y = 0;
        for( ; y < map->ms()->height(); ++y )
            if( !map->simp_cubes_[x][y] )
                break;
        if( y >= threshold )
            high_columns.push_back( x );
    }
    return high_columns;
}

void AIUtils::setup(pSimpleMap& map, int x, int y, pSimpleCube c)
{
    map->simp_cubes_[x][y] = c;
}

void AIUtils::kill (pSimpleMap& map, int x, int y)
{
    map->simp_cubes_[x][y].reset();
}

} //ai_detail
} //model
} //psc
