
#include "model/state/Dying.hpp"
#include "model/Cube.hpp"
#include "model/Map.hpp"
#include "EventDispatcher.hpp"
#include "ctrl/TimerDispatcher.hpp"

#include "all_fwd.hpp"

<%= debug_include %>

using namespace psc;
using namespace model;
using namespace state;

void <% debug_hook 'Dying::next_state' do %>(){
<% end %>
    // if( dying_step_ < map()->ms()->cube_dying_time() ){
    //  int alpha = 255.0 * (map()->ms()->cube_dying_time() - dying_step_) / map()->ms()->cube_dying_time();
    //  owner()->set_alpha( alpha );
    //         // owner()->emit_dying_process( alpha );
    //         ++dying_step_;
    //  return shared_from_this();
    // }
    // else{
    //  return pState(); // really dead
    // }
    map()->mark_chain_step_for_new_step(owner()->chain(), dying_chain_step());
    map()->attach_chain_bottom_up_from(owner()->x(), owner()->y() + 1, owner()->chain());
    switch_state(pState());
}

pState <% debug_hook 'Dying::init' do %>(){
<% end %>
    pDying result = std::tr1::static_pointer_cast<Dying>(shared_from_this());
    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
        std::tr1::bind(&Dying::next_state, result.get()), result,
            map()->ms()->cube_dying_duration());
    return result;
}
