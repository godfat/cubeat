
#include "presenter/Cube.hpp"
#include "presenter/Map.hpp"
#include "model/Map.hpp"

#include "utils/to_s.hpp"

#include "EasingEquations.hpp"
#include "Accessors.hpp"
#include "Sound.hpp"
#include "EventDispatcher.hpp"

#include "all_fwd.hpp"

<%= debug_include %>

using namespace psc;
using namespace presenter;
using psc::utils::to_s;

Map& Map::stop_dropping()
{
    map_setting()->garbage_dumpable(false).dropping_creatable(false);
    return *this;
}

//temp
Map& Map::kill_cube_at(int x, int y)
{
    if( model()->kill_cube_at(x, y) ) {
        Sound::i().play("1/a/1a-1.mp3");
        Sound::i().play("1/b/HitB@11.wav");
    }
    return *this;
}

int Map::sum_of_all_enemy() const {
    int sum = 0;
    BOOST_FOREACH(wpMap const& wmg, garbage_lands_)
        if( pMap mg = wmg.lock() )
            sum += mg->current_sum_of_attack();
    return sum;
}

bool Map::enemy_column_full() const {
    int full = 0, not_full = 0;
    BOOST_FOREACH(wpMap const& wmg, garbage_lands_) {
        if( pMap mg = wmg.lock() ) {
            if( mg->has_column_full() ) ++full;
            else ++not_full;
        }
    }
    return full >= not_full;
}

Map& <% debug_hook 'Map::push_view_slave' do %>(cube::pViewMaster view){
<% end %>
    view->init(map_setting());
    bind_view_event(view);

    // every existing cube should setup it also
    typedef std::pair<model::wpCube, pCube> cube_pair_type; // macro workaround
    BOOST_FOREACH(cube_pair_type cube_pair, cubes_){
        pCube cube = cube_pair.second;
        cube->push_view_slave( view->create(cube->model()) );
    }

    view_slaves_.push_back(view);
    return *this;
}

Map& <% debug_hook 'Map::set_view_master' do %>(cube::pViewMaster view){
<% end %>
    view->init(map_setting());
    bind_view_event(view);

    // every existing cube should setup it also
    typedef std::pair<model::wpCube, pCube> cube_pair_type; // macro workaround
    BOOST_FOREACH(cube_pair_type cube_pair, cubes_){
        pCube cube = cube_pair.second;
        cube->set_view_master( view->create(cube->model()) );
    }

    view_master_ = view;
    return *this;
}

void Map::speedup(){
    if( map_setting()->speed() < 400.f )
        map_setting()->speed( map_setting()->speed() + 10.f );
    ctrl::EventDispatcher::i().subscribe_timer( //timer to call speed up more frequently
        bind(&Map::speedup, this), shared_from_this(), 5000);
}

pMap <% debug_hook 'Map::init' do %>(){
<% end %>
    pMap self = shared_from_this();
    model_ = model::Map::create(self, map_setting_);
    model_->init_cubes(); // beware! this need refer model_!

    // NOTE: this is bad!! why is set_view_master related to speedup?
    //       it should be placed in somewhere like start map or start game.
    ctrl::EventDispatcher::i().subscribe_timer( //timer to call speed up
        std::tr1::bind(&Map::speedup, this), self, 20000);

    return self;
}

pMap <% debug_hook 'Map::init' do %>(utils::vector_2d<int> const& data){
<% end %>
    pMap self = shared_from_this();
    model_ = model::Map::create(self, map_setting_);
    model_->init_cubes(data); // beware! this need refer model_!

    // NOTE: this is bad!! why is set_view_master related to speedup?
    //       it should be placed in somewhere like start map or start game.
    ctrl::EventDispatcher::i().subscribe_timer( //timer to call speed up
        std::tr1::bind(&Map::speedup, this), self, 20000);

    return self;
}

void <% debug_hook 'Map::bind_view_event' do %>(cube::pViewMaster view){
<% end %>
    using namespace std::tr1::placeholders;
    column_full_event(
        std::tr1::bind(&cube::ViewMaster::column_full, view.get(), _1)).
    column_not_full_event(
        std::tr1::bind(&cube::ViewMaster::column_not_full, view.get(), _1)).
    new_chain_event(
        std::tr1::bind(&cube::ViewMaster::new_chain, view.get(), _1)).
    new_garbage_event(
        std::tr1::bind(&cube::ViewMaster::new_garbage, view.get(), _1, _2, _3)).
    warning_counting_event(
        std::tr1::bind(&cube::ViewMaster::warning_counting, view.get(), _1));
}

void <% debug_hook 'Map::bind_cube_event' do %>(pCube cube){
<% end %>
    using namespace std::tr1::placeholders;
    cube->model()->    go_dying_event( std::tr1::bind( &Cube::go_dying, cube.get() ) ).
                   go_exploding_event( std::tr1::bind( &Cube::go_exploding, cube.get() ) ).
                     be_garbage_event( std::tr1::bind( &Cube::be_garbage, cube.get() ) ).
                      be_broken_event( std::tr1::bind( &Cube::be_broken, cube.get() ) ).
                        restore_event( std::tr1::bind( &Cube::restore, cube.get(), _1) ).
                            hit_event( std::tr1::bind( &Cube::hit, cube.get(), _1, _2 ) ).
                      get_chain_event( std::tr1::bind( &Cube::get_chain, cube.get() ) ).
                     lose_chain_event( std::tr1::bind( &Cube::lose_chain, cube.get() ) ).
                   drop_a_block_event( std::tr1::bind( &Cube::drop_a_block, cube.get() ) ).
                   sink_a_block_event( std::tr1::bind( &Cube::sink_a_block, cube.get() ) );
}

pCube <% debug_hook 'Map::make_cube' do %>(int x, int y, int color_id){
<% end %>
    pCube cube = Cube::create(shared_from_this(), x, y, color_id);
    bind_cube_event(cube);
    BOOST_FOREACH(cube::pViewMaster& view, view_slaves_){
        cube->push_view_slave( view->create(cube->model()) );
    }
    if(view_master_) cube->set_view_master( view_master_->create(cube->model()) );
    cubes_.insert(std::make_pair(cube->model(), cube));
    return cube;
}

pCube <% debug_hook 'Map::make_cube_preview' do %>(int color_id){
<% end %>
    return make_cube(3, 14, color_id); //temp
}

Map& <% debug_hook 'Map::cycle' do %>(){
<% end %>
    model()->cycle_slow();
    model()->cycle_fast();
    return *this;
}

Map& <% debug_hook 'Map::cycle_slow' do %>(){
<% end %>
    model()->cycle_slow();
    return *this;
}

Map& <% debug_hook 'Map::cycle_fast' do %>(){
<% end %>
    model()->cycle_fast();
    return *this;
}
