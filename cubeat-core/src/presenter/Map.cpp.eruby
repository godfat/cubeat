
#include "presenter/Cube.hpp"
#include "presenter/Map.hpp"
#include "model/Map.hpp"
#include "Player.hpp"

#include "utils/to_s.hpp"
#include "utils/Logger.hpp"

#include "EasingEquations.hpp"
#include "Accessors.hpp"
#include "audio/Sound.hpp"
#include "EventDispatcher.hpp"
#include "ctrl/TimerDispatcher.hpp"

#include "all_fwd.hpp"

<%= debug_include %>

using namespace psc;
using namespace presenter;
using psc::utils::to_s;

Map& Map::stop_dropping()
{
    map_setting()->garbage_dumpable(false).dropping_creatable(false);
    return *this;
}

Map& Map::start_dropping()
{
    map_setting()->garbage_dumpable(true).dropping_creatable(true);
    return *this;
}

int Map::sum_of_all_enemy() const {
    int sum = 0;
    BOOST_FOREACH(wpMap const& wmg, garbage_lands_)
        if( pMap mg = wmg.lock() )
            sum += mg->current_sum_of_attack();
    return sum;
}

bool Map::enemy_column_full() const {
    int full = 0, not_full = 0;
    BOOST_FOREACH(wpMap const& wmg, garbage_lands_) {
        if( pMap mg = wmg.lock() ) {
            if( mg->column_full_num() ) ++full;
            else ++not_full;
        }
    }
    return full >= not_full;
}

Map& <% debug_hook 'Map::push_view_slave' do %>(cube::pViewMaster view){
<% end %>
    view->init(map_setting());
    bind_view_event(view);

    // every existing cube should setup it also
    typedef std::pair<model::wpCube, pCube> cube_pair_type; // macro workaround
    BOOST_FOREACH(cube_pair_type cube_pair, cubes_){
        pCube cube = cube_pair.second;
        cube->push_view_slave( view->create(cube->model()) );
    }

    view_slaves_.push_back(view);
    return *this;
}

Map& <% debug_hook 'Map::set_view_master' do %>(cube::pViewMaster view){
<% end %>
    view->init(map_setting());
    bind_view_event(view);

    // every existing cube should setup it also
    typedef std::pair<model::wpCube, pCube> cube_pair_type; // macro workaround
    BOOST_FOREACH(cube_pair_type cube_pair, cubes_){
        pCube cube = cube_pair.second;
        cube->set_view_master( view->create(cube->model()) );
    }
// WTF MEMO 2012.9 failed to adjust for balance
//    if( ctrl::pPlayer p = player_.lock() ) {
//        view->setup_ability_button();
//    }

    view_master_ = view;
    return *this;
}

void Map::speedup(){
    if( map_setting()->sink_speed() < map_setting()->sink_speed_limit() ) {
        map_setting()->sink_speed( map_setting()->sink_speed() + map_setting()->sink_speed_add() );
        ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
            std::tr1::bind(&Map::speedup, this), shared_from_this(), 30000);
    }
}

void Map::crushing_speedup(){
    map_setting()->sink_speed( 400 );
}

pMap <% debug_hook 'Map::init' do %>(){
<% end %>
    pMap self = shared_from_this();
    model_ = model::Map::create(self, map_setting_);
    model_->init_cubes(); // beware! this need refer model_!

    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe( //timer to call speed up
        std::tr1::bind(&Map::speedup, this), self, 30000);

    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
        std::tr1::bind(&Map::crushing_speedup, this), self, 180000);

    return self;
}

pMap <% debug_hook 'Map::init' do %>(utils::vector_2d<int> const& data){
<% end %>
    pMap self = shared_from_this();
    model_ = model::Map::create(self, map_setting_);
    model_->init_cubes(data); // beware! this need refer model_!

    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe( //timer to call speed up
        std::tr1::bind(&Map::speedup, this), self, 30000);

    ctrl::EventDispatcher::i().get_timer_dispatcher("game")->subscribe(
        std::tr1::bind(&Map::crushing_speedup, this), self, 180000);

    return self;
}

void <% debug_hook 'Map::bind_view_event' do %>(cube::pViewMaster view){
<% end %>
    using namespace std::tr1::placeholders;
    column_full_event(
        std::tr1::bind(&cube::ViewMaster::column_full, view.get(), _1)).
    column_not_full_event(
        std::tr1::bind(&cube::ViewMaster::column_not_full, view.get(), _1)).
    new_chain_event(
        std::tr1::bind(&cube::ViewMaster::new_chain, view.get(), _1)).
    new_chain_grouping_event(
        std::tr1::bind(&cube::ViewMaster::new_chain_grouping, view.get(), _1, _2)).
    new_garbage_event(
//        std::tr1::bind(&cube::ViewMaster::new_garbage, view.get(), _1, _2, _3)).
        std::tr1::bind(&cube::ViewMaster::new_garbage, view.get(), _1, _2)).
    pop_garbage_event(
        std::tr1::bind(&cube::ViewMaster::pop_garbage, view.get(), _1)).
    hit_by_garbage_event(
        std::tr1::bind(&cube::ViewMaster::hit_by_garbage, view.get(), _1)).
    warning_sound_event(
        std::tr1::bind(&cube::ViewMaster::warning_sound, view.get(), _1)).
    alert_bar_animate_event(
        std::tr1::bind(&cube::ViewMaster::alert_bar_animate, view.get(), _1)).
    alert_bar_freeze_event(
        std::tr1::bind(&cube::ViewMaster::alert_bar_freeze, view.get(), _1)).
    alert_bar_update_event(
        std::tr1::bind(&cube::ViewMaster::alert_bar_update, view.get(), _1)).
    overheat_event(
        std::tr1::bind(&cube::ViewMaster::show_overheat, view.get(), _1)).
    ending_effect_event(
        std::tr1::bind(&cube::ViewMaster::ending_effect, view.get()));
// WTF MEMO 2012.9 failed to adjust for balance
//    ability_button_event(
//        std::tr1::bind(&cube::ViewMaster::ability_button, view.get(), _1));
}

void <% debug_hook 'Map::bind_cube_event' do %>(pCube cube){
<% end %>
    using namespace std::tr1::placeholders;
    cube->model()->    go_dying_event( std::tr1::bind( &Cube::go_dying, cube.get(), _1 ) ).
                   go_exploding_event( std::tr1::bind( &Cube::go_exploding, cube.get(), _1 ) ).
                     be_garbage_event( std::tr1::bind( &Cube::be_garbage, cube.get() ) ).
                      be_broken_event( std::tr1::bind( &Cube::be_broken, cube.get(), _1 ) ).
                        restore_event( std::tr1::bind( &Cube::restore, cube.get(), _1) ).
                         ending_event( std::tr1::bind( &Cube::ending, cube.get(), _1) ).
                            hit_event( std::tr1::bind( &Cube::hit, cube.get(), _1, _2) ).
                      get_chain_event( std::tr1::bind( &Cube::get_chain, cube.get() ) ).
                     lose_chain_event( std::tr1::bind( &Cube::lose_chain, cube.get() ) ).
                   losing_chain_event( std::tr1::bind( &Cube::losing_chain, cube.get(), _1) ).
                   drop_a_block_event( std::tr1::bind( &Cube::drop_a_block, cube.get() ) ).
                   sink_a_block_event( std::tr1::bind( &Cube::sink_a_block, cube.get() ) ).
                     update_pos_event( std::tr1::bind( &Cube::update_pos, cube.get() ) ).
                   approach_pos_event( std::tr1::bind( &Cube::approach_pos, cube.get() ) ).
                    garbage_fly_event( std::tr1::bind( &Cube::garbage_fly, cube.get() ) );
}

pCube <% debug_hook 'Map::make_cube' do %>(int x, int y, int color_id){
<% end %>
    pCube cube = Cube::create(shared_from_this(), x, y, color_id);
    bind_cube_event(cube);
    BOOST_FOREACH(cube::pViewMaster& view, view_slaves_){
        cube->push_view_slave( view->create(cube->model()) );
    }
    if(view_master_) cube->set_view_master( view_master_->create(cube->model()) );
    cubes_.insert(std::make_pair(cube->model(), cube));
    return cube;
}

pCube Map::make_garbage(int x, int y){
    pCube c = make_cube(x, y, -1);
    c->goto_garbage_orig();
    return c;
}

pCube <% debug_hook 'Map::make_cube_preview' do %>(int color_id){
<% end %>
    return make_cube(3, 11, color_id); //temp
}

size_t Map::get_player_ability_left() const {
    if( ctrl::pPlayer p = player_.lock() ) {
        return p->ability_left();
    }
    return 0;
}

Map& Map::push_player_ability() {
    if( ctrl::pPlayer p = player_.lock() ) {
        p->push_ability();
    }
    return *this;
}

Map& <% debug_hook 'Map::cycle' do %>(){
<% end %>
//    model()->cycle_slow();
//    model()->cycle_fast();
    model()->cycle();
    BOOST_FOREACH(cube::pViewMaster& view, view_slaves_){
        view->cycle(*this);
    }
    if( view_master_ ) view_master_->cycle(*this);
    return *this;
}

Map& Map::ending_effect() {
    ending_effect_event()();
    model()->ending_effect();
    return *this;
}

//Map& Map::cycle_slow(){
//    model()->cycle_slow();
//    return *this;
//}
//
//Map& Map::cycle_fast(){
//    model()->cycle_fast();
//    return *this;
//}
