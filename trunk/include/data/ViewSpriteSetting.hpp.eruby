
<% header_guard do %>

#include <tr1/memory>
#include <list>

namespace psc{ namespace data{

class ViewSpriteSetting{
public:
    typedef std::tr1::shared_ptr<ViewSpriteSetting> pointer_type;
    static pointer_type create(double x_offset = 0, double y_offset = 0, double cube_size = 50)
    {
        return pointer_type(new ViewSpriteSetting(x_offset, y_offset, cube_size));
    }
public:
    ViewSpriteSetting& push_ally(int id){
        ally_input_ids_.push_back(id); return *this;
    }
    ViewSpriteSetting& push_enemy(int id){
        enemy_input_ids_.push_back(id); return *this;
    }

    std::list<int> const& ally_input_ids() const{ return ally_input_ids_; }
    std::list<int> const& enemy_input_ids() const{ return enemy_input_ids_; }

private:
    ViewSpriteSetting(double x_offset = 0, double y_offset = 0, double cube_size = 50):
    x_offset_(x_offset), y_offset_(y_offset), cube_size_(cube_size){}
<%= accessor :double, :x_offset, :y_offset, :cube_size %>
    std::list<int> ally_input_ids_, enemy_input_ids_;
};

}} // end of namespace

<% end %>
