
/*2007.11.9 
  cleaned up things which were coupled with VtMovieClip
  
  These included file is going to be heavily modified or deleted:
  1. VtMovieClip.hpp
  2. MovieClip.hpp
*/

<% header_guard do %>

#include "model/Map.hpp"
#include "model/state/Waiting.hpp"

#include "all_fwd.hpp"
#include "utils/ObjectPool.hpp"
#include "utils/Random.hpp"
// #include "data/Color.hpp"
#include "data/Cube.hpp"

#include <tr1/functional>

<%= debug_include %>

namespace psc{ namespace model{

class Cube: public std::tr1::enable_shared_from_this<Cube>{
    friend class state::State;
public:
    typedef pCube pointer_type;

public:
    static pCube create(wpMap map, int x = 0, int y = 0, int color_id = 0){
        return utils::ObjectPool<Cube>::create(map, x, y, color_id)->init();
    }
    // perhaps you have to specify from_id(color_id, "ms()->color_amounts()");
    Cube(wpMap map, int x = 0, int y = 0, int color_id = 0): // x_(x), y_(y), color_id_(color_id)
        data_(data::Cube::create(x, y, color_id)), map_(map), cycled_(false),
        has_grounded_(false), is_broken_(false), is_garbage_(false), hp_(1),
        lose_chain_delay_(0)
    {}
    <% debug_hook '~Cube' do %>(){ <% end %> lose_chain(); }

    int x() const{ return data()->x(); }
    int y() const{ return data()->y(); }
    int color_id() const{ return data()->color_id(); }
    Cube& x(int new_x){ data()->x(new_x); return *this; }
    Cube& y(int new_y){ data()->y(new_y); return *this; }
    Cube& color_id(int new_color_id){ data()->color_id(new_color_id); return *this; }

    // begin only used by Map::cycle
    bool cycle_and_die();
    void refresh(){ cycled_ = false; }
    // end

    // begin only used by Map::next_state
    void drop_a_block();
    state::pWaiting is_waiting();
    state::pDropping is_dropping();
    void lose_chain();
    // end

    // begin only used by Map::square_can_lose_chain,
    //   which is used by Map::next_state
    state::pDying const is_dying() const;
    // end

    // begin only used by Map::cubes_belong_to_the_chain_from_bottom_to_top
    void chain(pChain chain){ chain_belonged_to_ = chain; get_chain_event()(); }
    // end

    // begin only used by OneFading::get_the_chain,
    //   which is used by OneFading::fade
    pChain const chain() const{ return chain_belonged_to_; }
    // end

    // begin only used by OneFading::fade
    void go_dying();
    void cycled(){ cycled_ = true; }
    // end

	// begin only used by State::map
    pMap map(){ return map_.lock(); }
    pMap const map() const{ return map_.lock(); }
    // end

    // begin only used by Map.cpp => local function check_not_continue
    friend inline bool operator!=(Cube const& lhs, Cube const& rhs){
        return lhs.color_id() == -1 || rhs.color_id() == -1 ||
               lhs.color_id() != rhs.color_id();
    }
    // end

    // begin only used by model::Map::color_map
    // int color_id() const{ return data::Color::for_id(color_); }
    // end

	// begin only used by Map::insert_garbage,
	//   which is used by Map::cycle_creation_garbage
	void be_garbage();
	// end

    bool is_garbage() const{ return is_garbage_; }
    void be_broken();
	void restore();

	// added
	// state::pExploding const is_exploding() const;
	void go_exploding();

	bool has_grounded(){ return has_grounded_; }
	void set_grounded(){ has_grounded_ = true; }

	int& <% debug_hook 'lose_chain_delay' do %>(){ <% end %> return lose_chain_delay_; }
	int const& <% debug_hook 'lose_chain_delay' do %>() const{ <% end %> return lose_chain_delay_; }

private:
    pCube <% debug_hook 'init' do %>(){
<% end %>
        pCube self = shared_from_this();
        state_ = state::Waiting::create(self);
        return self;
    }
    bool is_dead() const{ return state_.use_count() == 0; }

private:
<%= accessor :'data::pCube', :data %>
    wpMap map_;
    // data::Color color_;
    pChain chain_belonged_to_;
    state::pState state_;
    bool cycled_, has_grounded_, is_broken_, is_garbage_;
	int hp_, lose_chain_delay_;
<%= accessor :'std::tr1::function<void()>', :drop_a_block_event, :go_dying_event, :go_exploding_event, :be_garbage_event, :be_broken_event, :get_chain_event, :lose_chain_event %>
<%= accessor :'std::tr1::function<void(int)>', :restore_event %>
<%= accessor :'std::tr1::function<void(int,int)>', :hit_event %>
};

}}

<% end %>
