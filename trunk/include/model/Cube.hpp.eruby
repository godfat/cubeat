
/*2007.11.9 
  cleaned up things which were coupled with VtMovieClip
  
  These included file is going to be heavily modified or deleted:
  1. VtMovieClip.hpp
  2. MovieClip.hpp
*/

<% header_guard do %>

#include "model/Map.hpp"
#include "model/state/Waiting.hpp"

#include "all_fwd.hpp"
#include "utils/ObjectPool.hpp"
#include "data/Color.hpp"

<%= debug_include %>

namespace psc{ namespace model{

class Cube: public std::tr1::enable_shared_from_this<Cube>{
<%= accessor :int, :x, :y %>
public:
    typedef std::tr1::shared_ptr<Cube> pointer_type;

public:
    static pCube create(wpMap map, int x = 0, int y = 0, int color_id = 0){
        return utils::ObjectPool<Cube>::create(map, x, y, color_id)->init();
    }
    Cube(wpMap map, int x = 0, int y = 0, int color_id = 0): x_(x), y_(y),
        map_(map), color_(data::Color::from_id(color_id)), cycled_(false),
        has_grounded_(false), is_broken_(false), is_garbage_(false), hp_(1),
        lose_chain_delay_(0)
    {}
    <% debug_hook '~Cube' do %>(){<%end%>}

    // begin only used by Map::cycle
    bool cycle_and_die();
    void refresh(){ cycled_ = false; }
    // end

    // begin only used by Map::next_state
    void drop_a_block(){ ++y_; }
    state::pWaiting is_waiting();
    state::pDropping is_dropping();
    void lose_chain();
    // end

    // begin only used by Map::square_can_lose_chain,
    //   which is used by Map::next_state
    state::pDying const is_dying() const;
    // end

    // begin only used by OneFading::get_the_chain,
    //   which is used by OneFading::fade
    void chain(pChain chain){ chain_belonged_to_ = chain; }
    // end

    // begin only used by Map::squares_belong_to_the_chain_from_bottom_to_top
    pChain const chain() const{ return chain_belonged_to_; }
    // end

    // begin only used by OneFading::fade
    void go_dying();
    void cycled(){ cycled_ = true; }
    // end

	// begin only used by State::map
    pMap map(){ return map_.lock(); }
    pMap const map() const{ return map_.lock(); }
    // end

    // begin only used by Map.cpp => local function check_not_continue
    friend inline bool operator!=(Cube const& lhs, Cube const& rhs){ return lhs.color_ != rhs.color_; }
    // end

	// begin only used by Map::insert_garbage,
	//   which is used by Map::cycle_creation_garbage
	void be_garbage();
	// end

    bool is_garbage() const{ return is_garbage_; }
    void be_broken();
	void restore();

	// graphical issues, call body to resolve
	void set_alpha(int /*alpha*/)     {}
	void hide_outline()           {}
	void show_outline()           {}
	void explosion_setup()        {}
	void explosion_loop(int /*step*/) {}
	void explosion_cleanup()      {}
	// end

	// added
	state::pExploding const is_exploding() const;
	void go_exploding();

	bool has_grounded(){ return has_grounded_; }
	void set_grounded(){ has_grounded_ = true; }

	int& <% debug_hook 'lose_chain_delay' do %>(){ <% end %> return lose_chain_delay_; }
	int const& <% debug_hook 'lose_chain_delay' do %>() const{ <% end %> return lose_chain_delay_; }

private:
    pCube <% debug_hook 'init' do %>(){
<% end %>
        pCube self = shared_from_this();
        state_ = state::Waiting::create(self);
        return self;
    }

private:
    wpMap map_;
    data::Color color_;
    pChain chain_belonged_to_;
    state::pState state_;
    bool cycled_, has_grounded_, is_broken_, is_garbage_;
	int hp_, lose_chain_delay_;
};

}}

<% end %>
