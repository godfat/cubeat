
<% header_guard do %>


#include "presenter/Map.hpp"
#include "model/Cube.hpp"

#include "all_fwd.hpp"

#include "data/MapSetting.hpp"
#include "utils/for_each_multi_array.hpp"

#include <boost/multi_array.hpp>

#include <boost/tr1/tr1/functional>

namespace psc{ namespace model{

class Map{
public:
    typedef std::tr1::shared_ptr<Map> pointer_type;
    typedef boost::multi_array<pCube, 2> container_type;

public:
    static pointer_type create(presenter::wpMap owner, data::pMapSetting setting){
        // map doesn't need a pool
        return pointer_type(new Map(owner, setting));
    }
    Map(presenter::wpMap owner, data::pMapSetting setting):
        owner_(owner), setting_(setting),
        cubes_(boost::extents[setting->width()][setting->height()])
    {
        init_cubes();
    }
    Map& cycle(){
        using namespace std::tr1::placeholders;
        n_of_newcomers_ = 0;
        utils::reverse_for_each(cubes_, std::tr1::bind(&Map::do_cycle, this, _1, _2));
        return *this;
    }
    data::pMapSetting ms() const{ return setting_; }

private:
    void do_cycle(pCube c, int i);
    Map& init_cubes();
    Map& insert(pCube cube);

private:
    presenter::wpMap owner_; // should be weak_ptr;
    data::pMapSetting setting_;
    container_type cubes_;
    int n_of_newcomers_;
};

}} // end of namespace

<% end %>
