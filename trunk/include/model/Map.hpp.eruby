
<% header_guard do %>

#include "model/Cube.hpp"

#include "all_fwd.hpp"

#include "data/MapSetting.hpp"

#include <boost/multi_array.hpp>
#include <boost/tr1/tr1/functional>
#include <set>
#include <vector>

namespace psc{ namespace model{

class Map{
public:
    typedef std::tr1::shared_ptr<Map> pointer_type;
    typedef boost::multi_array<pCube, 2> container_type;
    typedef boost::multi_array<int, 2> preview_type;
    typedef std::set<pCube> cube_list_type;
    typedef std::vector<pChain> chain_list_type;

public:
    static pointer_type create(presenter::wpMap owner, data::pMapSetting setting){
        // map doesn't need a pool
        return pointer_type(new Map(owner, setting));
    }

public:
    Map(presenter::wpMap owner, data::pMapSetting setting):
        owner_(owner), setting_(setting),
        cubes_(boost::extents[setting->width()][setting->height()])
    {}
    Map& init_cubes();
    <% debug_hook '~Map' do %>(){<%end%>}

    Map& cycle(){
        refresh_cubes(); // make cube to cycle
    	// update_chains();
        cycle_cubes();
    	// cycle_creation_garbage(); // added
    	if(ms()->dropping_creatable()){
    	    // cycle_creation(); // added
    		// cycle_warning(); // added
        }
        return *this;
    }
    data::pMapSetting const& <% debug_hook 'ms' do %>() const{ <% end %> return setting_; }

    // begin used by Dropping::cycle, Waiting::cycle
    state::pState next_state(pCube);
    // end

    // begin only used by OneFading::fade
    void cubes_belong_to_the_chain_from_bottom_to_top(pCube, pChain);
    // end

    // begin only used by OneFading::get_the_chain
    //   which is used by OneFading::fade
    void push_chain(pChain chain){ chains_.push_back(chain); }
    // end

    // container_type const& cubes() const{ return cubes_; }
    preview_type preview() const;

private:
    Map& insert(pCube cube);
    void cycle_cubes();
    void cycle_a_cube(pCube c, int i);
    void refresh_cubes();

    void make_row(pCube that, cube_list_type&, cube_list_type&);
    void make_column(pCube that, cube_list_type&, cube_list_type&);
    void make_clist(cube_list_type&, cube_list_type&, cube_list_type&);
    pOneFading make_OneFading(pCube);
    bool is_below_empty(cpCube) const;
    void update_chains();
    bool cube_can_lose_chain(cpCube) const;
    void insert_garbage(pCube that, int x, int y); // added

private:
    presenter::wpMap owner_; // should be weak_ptr;
    data::pMapSetting setting_;
    container_type cubes_;
    int n_of_newcomers_;
    // someday make it to be std::list
    std::vector<pChain> chains_;
};

}} // end of namespace

<% end %>
