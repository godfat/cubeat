
/* 2007.11.9
   Nothing changed.

  These included file are going to be modified:
  1. Map.hpp
  2. Square.hpp
*/

<% header_guard do %>

#include "model/Chain.hpp"
#include "model/Cube.hpp"
#include "model/Map.hpp"
#include "utils/ObjectPool.hpp"

#include <boost/tr1/tr1/memory>

<%= debug_include %>

namespace psc{ namespace model{

class OneFading{
    typedef Map::clist_type clist_type;
public:
    typedef std::tr1::shared_ptr<OneFading> pointer_type;
    static pointer_type create(Map& map, clist_type const& list){
        return utils::ObjectPool<OneFading>::create(map, list);
    }
public:
    // begin only used by Map::next_state
    <% debug_hook 'OneFading' do %>(Map& map, clist_type const& list):
        map_(map), list_(list)
    {<%end%>}
    clist_type::size_type size() const{ return list_.size(); }
    void fade(pCube that_would_be_killed_by_map){

        pChain chain = get_the_chain();

        for(clist_type::iterator i=list_.begin(), iend=list_.end();
            i!=iend; ++i)
        {
            map_.cubes_belong_to_the_chain_from_bottom_to_top(*i, chain);
            if( *i != that_would_be_killed_by_map ){
                (**i).go_dying();
                (**i).cycled();
            }
        }
    }
    // end

private:
    pChain get_the_chain(){
        pChain chain;

        //this for loop will get the first Chain it finds in this column or row
        for(clist_type::iterator i=list_.begin(), iend=list_.end();
            i != iend; ++i)
        {
            if( (**i).chain() ) {
                chain = (**i).chain();
                break;
            }
        }

        //if we can't find any useful Chain here, we'll create one
        if( !chain ) {
            chain = Chain::create();
            chain->step_one();
            map_.push_chain( chain );
        }

        //and add combo to it
        chain->add_last_step_amounts( list_.size() );

        return chain;
    }

private:
    Map& map_;
    clist_type list_;
};

}} // end of namespace

<% end %>
