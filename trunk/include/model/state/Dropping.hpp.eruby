
<% header_guard do %>

#include "model/state/State.hpp"
#include "utils/ObjectPool.hpp"
#include "EventDispatcher.hpp"

#include <tr1/functional>

<%= debug_include %>

namespace psc{ namespace model{ namespace state{

class Dropping: public State{
public:
    typedef pDropping pointer_type;

public:
    static pState create(wpCube owner){
        pDropping result = utils::ObjectPool<Dropping>::create(owner);
        ctrl::EventDispatcher::i().subscribe_timer(
            std::tr1::bind(&State::next_state, result.get()), result, 1);
        return result->init();
    }

public:
    Dropping(wpCube owner): State(owner){}
    virtual <% debug_hook '~Dropping' do %>(){<%end%>}

protected:
    virtual pState init(){
        pState result = shared_from_this();
        ctrl::EventDispatcher::i().subscribe_timer(
            std::tr1::bind(&State::next_state, result.get()), result, 500);
        return result;
    }
};

}}} // end of namespace

<% end %>
