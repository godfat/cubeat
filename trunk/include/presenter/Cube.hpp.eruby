
<% header_guard do %>

// 1. map presenter is created.
// 2. map model is inited.
// 3. map view is inited.
// 
// 4. cube presenter list is created, passing map presenter to it.
// 5. cube model is inited, getting map model.
// 6. map model gets cube model.
// 
// 7. cube view is inited, getting map view.
// 8. map view gets cube view.

#include "all_fwd.hpp"
#include "utils/ObjectPool.hpp"
#include "presenter/cube/ViewBase.hpp"
#include "EventDispatcher.hpp"

#include <boost/foreach.hpp>
#include <tr1/memory>

<%= debug_include %>

namespace psc{ namespace presenter{

class Cube{
public:
    typedef Cube this_type;
    typedef std::tr1::shared_ptr<this_type> pointer_type;

public:
    pointer_type static create(wpMap map, int x = 0, int y = 0, int color_id = 0){
        return utils::ObjectPool<this_type>::create(map, x, y, color_id);
    }
public:
    Cube(wpMap map, int x = 0, int y = 0, int color_id = 0);
    <% debug_hook '~Cube' do %>(){<%end%>}

    void <% debug_hook 'drop_a_block' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->drop_a_block(); }
        if(view_master_)
            view_master_->drop_a_block_with_callback(
                std::tr1::bind(&model::Cube::next_state, model().get()) );
        else
            ctrl::EventDispatcher::i().subscribe_timer(
                std::tr1::bind(&model::Cube::next_state, model().get()),
                ms()->cube_dropping_duration());
    }
    void <% debug_hook 'sink_a_block' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->sink_a_block(); }
        if(view_master_)
            view_master_->sink_a_block_with_callback(
                std::tr1::bind(&model::Cube::next_state, model().get()) );
        else
            ctrl::EventDispatcher::i().subscribe_timer(
                std::tr1::bind(&model::Cube::next_state, model().get()),
                ms()->cube_sinking_duration());
    }
    void <% debug_hook 'go_dying' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->go_dying(); }
        if(view_master_) view_master_->go_dying();
    }
    void <% debug_hook 'go_exploding' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->go_exploding(); }
        if(view_master_) view_master_->go_exploding();
    }
    void <% debug_hook 'be_garbage' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->be_garbage(); }
        if(view_master_) view_master_->be_garbage();
    }
    void <% debug_hook 'be_broken' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->be_broken(); }
        if(view_master_) view_master_->be_broken();
    }
    void <% debug_hook 'restore' do %>(int color_id){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->restore(color_id); }
        if(view_master_) view_master_->restore(color_id);
    }
    void <% debug_hook 'hit' do %>(int dmg, int hp){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->hit(dmg, hp); }
        if(view_master_) view_master_->hit(dmg, hp);
    }
    void <% debug_hook 'get_chain' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->get_chain(); }
        if(view_master_) view_master_->get_chain();
    }
    void <% debug_hook 'lose_chain' do %>(){ <% end %>
        BOOST_FOREACH(cube::pViewBase view, view_slaves_){ if(view) view->lose_chain(); }
        if(view_master_) view_master_->lose_chain();
    }
    Cube& set_view_master(cube::pViewBase view){ view_master_ = view; return *this; }
    Cube& push_view_slave(cube::pViewBase view){ view_slaves_.push_back(view); return *this; }

    int x() const;
    int y() const;
    int color_id() const;

private:
    data::cpMapSetting ms() const;

private:
    wpMap map_;
<%= reader 'model::pCube', :model %>
    std::list<cube::pViewBase> view_slaves_;
    cube::pViewBase view_master_;
};

}}

<% end %>
