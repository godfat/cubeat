
<% header_guard do %>

#include "model/Map.hpp"
// #include "presenter/Cube.hpp"

#include "all_fwd.hpp"

#include <tr1/functional>
#include <map>

<%= debug_include %>

namespace psc{ namespace presenter{

class Map: public std::tr1::enable_shared_from_this<Map>{
public:
    typedef pMap pointer_type;
    typedef std::map<model::wpCube, pCube> container_type;
    typedef std::tr1::function<cube::pViewBase(int,int,int)> make_view_type;

    typedef model::Map::color_map_type color_map_type;

public:
    static pMap create(data::pMapSetting setting){ return pMap(new Map(setting))->init(); }

public:
    Map(data::pMapSetting setting): setting_(setting){}
    Map& push_view(make_view_type make_view);

public:
    pCube make_cube(int x = 0, int y = 0, int color_id = 0);
    pCube make_cube_preview(int color_id = 0);
    Map& cycle();
    <% debug_hook '~Map' do %>(){<%end%>}
    // model::Map::container_type const& cubes() const{ return model_.cubes(); }
    void <% debug_hook 'release' do %>(model::wpCube cube){ <%end%> cubes_.erase(cube); }

    color_map_type color_map() const{ return model_->color_map(); }

private:
    pMap init();

private:
    data::pMapSetting setting_;
<%= reader 'model::pMap', :model %>
    view::pMap view_;
    container_type cubes_;
    std::list<make_view_type> make_view_list_;
};

}} // end of namespace

<% end %>
