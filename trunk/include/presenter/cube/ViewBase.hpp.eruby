
<% header_guard do %>

#include "model/Cube.hpp"
#include <tr1/memory>

namespace psc{ namespace presenter{ namespace cube{

class ViewBase{
public:
    typedef std::tr1::shared_ptr<ViewBase> pointer_type;
    static pointer_type create(model::pCube){ return pointer_type(); }
public:
    ViewBase(model::pCube cube): data_(cube->data()){}
    virtual ~ViewBase(){}
    virtual void drop_a_block(){}
    virtual void go_dying(){}
    virtual void go_exploding(){}
    virtual void be_garbage(){}
    virtual void be_broken(){}
    virtual void restore(int /*color_id*/){}
    virtual void hit(int /*dmg*/, int /*hp*/){}
    virtual void get_chain(){}
    virtual void lose_chain(){}

protected:
    data::pCube data() const{ return data_.lock(); }
private:
    data::wpCube data_;
};

}}} // end of namespaces

<% end %>
