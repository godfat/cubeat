
<% header_guard do %>

#include "presenter/cube/ViewBase.hpp"
#include <tr1/memory>

namespace psc{
namespace view{
class Scene;
typedef std::tr1::shared_ptr<Scene> pScene;
typedef std::tr1::weak_ptr<Scene> wpScene;
}
namespace presenter{
class Map;
namespace cube{

class ViewMaster{
    friend class psc::presenter::Map; // for you to setup my map setting
public:
    typedef std::tr1::shared_ptr<ViewMaster> pointer_type;
public:
    virtual ViewBase::pointer_type create(model::pCube cube) const{
        return ViewBase::pointer_type();
    }
    virtual void redraw(Map const& map){}
    virtual ~ViewMaster(){}

protected:
    ViewMaster(view::pScene scene):scene_(scene){}
    data::pMapSetting map_setting() const{ return map_setting_.lock(); }
    view::pScene scene() const{ return scene_.lock(); }
    view::wpScene scene_; //good?

private:
    ViewMaster& map_setting(data::wpMapSetting ms){ map_setting_ = ms; return *this; }
    data::wpMapSetting map_setting_;
};

}}} // end of namespace

<% end %>
