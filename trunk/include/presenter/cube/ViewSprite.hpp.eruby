
<% header_guard do %>

#include "presenter/cube/ViewBase.hpp"
#include "view/Sprite.hpp"

#include "Accessors.hpp"
#include "EasingEquations.hpp"

#include "all_fwd.hpp"

#include <boost/lexical_cast.hpp>

namespace psc{ namespace presenter{ namespace cube{

class ViewSprite: public ViewBase{
public:
    static ViewBase::pointer_type create(data::wpCube data,
        view::pScene scene, data::pMapSetting setting)
    {
        return utils::ObjectPool<ViewSprite>::create(data, scene, setting);
    }
    static void redraw(Map const& map){}
public:
    ViewSprite(data::wpCube wd, view::pScene scene, data::pMapSetting setting):
        ViewBase(wd), cube_size_(setting->cube_size())
    {
        data::pCube d = data().lock();
        int color_id = d->color_id();

        std::string path = "cubes/cube-item-" + boost::lexical_cast<std::string>(color_id);
        body_ = view::Sprite::create(path, scene, cube_size_, cube_size_);

        int x = d->x(), y = d->y();
        adjust(x, y);
    }
    virtual void drop_a_block(){
        data::pCube d = data().lock();
        int x = d->x(), y = d->y();
        // adjust(x, y);

        // body_->moveTween(100 + x*cube_size_, 576-50 - y*cube_size_, 500);
        body_->tween<easing::Linear, accessor::Pos2D>(
            vec2(100 + x*cube_size_, 576-50 - y*cube_size_), 500
        );
    }

    virtual void go_dying(){
        body_->tween<easing::Linear, accessor::Alpha>(0, 100);
    }

private:
    ViewSprite& adjust(int x, int y){
        body_->moveTo(100 + x*cube_size_, 576-50 - y*cube_size_);
        return *this;
    }

private:
    view::pSprite body_;
    int cube_size_;
};

}}} // end of namespaces

<% end %>
