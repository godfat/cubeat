
<% header_guard do %>

#include "presenter/cube/ViewBase.hpp"
#include "view/Sprite.hpp"

#include "Accessors.hpp"
#include "EasingEquations.hpp"

#include "all_fwd.hpp"

#include <boost/lexical_cast.hpp>

namespace psc{ namespace presenter{ namespace cube{

class ViewSprite: public ViewBase{
public:
    static ViewBase::pointer_type create(data::wpCube data,
        view::pScene scene, data::pMapSetting setting)
    {
        return utils::ObjectPool<ViewSprite>::create(data, scene, setting);
    }
    static void redraw(Map const& map){}
public:
    ViewSprite(data::wpCube wd, view::pScene scene, data::wpMapSetting set):
        ViewBase(wd), setting_(set)
    {
        data::pCube d = data().lock();
        int color_id = d->color_id();

        data::pMapSetting s = setting();

        std::string path = "cubes/cube-item-" + boost::lexical_cast<std::string>(color_id);
        body_ = view::Sprite::create(path, scene, s->cube_size(), s->cube_size());

        body_->moveTo( pos_x(d->x(), s), pos_y(d->y(), s) );
    }
    virtual void drop_a_block(){
        data::pCube d = data().lock();
        int x = d->x(), y = d->y();

        data::pMapSetting s = setting();

        body_->tween<easing::Linear, accessor::Pos2D>(
            vec2( pos_x(x, s), pos_y(y, s) ), s->cube_dropping_duration()
        );
    }

    virtual void <% debug_hook 'go_dying' do %>(){ <% end %>
        body_->tween<easing::Linear, accessor::Alpha>(0, setting()->cube_dying_duration());
    }

private:
    data::pMapSetting setting() const{ return setting_.lock(); }
    static inline int pos_x(int x, data::pMapSetting s){
        return s->x_offset() + x*s->cube_size(); }
    static inline int pos_y(int y, data::pMapSetting s){
        return s->y_offset() + -(y*s->cube_size()); }

private:
    view::pSprite body_;
    data::wpMapSetting setting_;
};

}}} // end of namespaces

<% end %>
