
#include "model/detail/MapUtils.hpp"

#include "presenter/Map.hpp"
#include "presenter/Cube.hpp"
#include "model/Map.hpp"
#include "model/Cube.hpp"
#include "model/OneFading.hpp"
#include "model/state/Waiting.hpp"
#include "model/state/Dropping.hpp"
#include "model/state/Dying.hpp"

#include "utils/Random.hpp"
#include "utils/ChainChecker.hpp"
#include "utils/vector_2d.hpp"

#include <boost/lambda/lambda.hpp>
#include <boost/foreach.hpp>
#include <algorithm>
#include <cmath>

<%= debug_include %>

using namespace psc;
using namespace model;
using detail::check_not_continue;
using detail::process_chaining;
using namespace std::tr1::placeholders;

Map& <% debug_hook 'Map::init_cubes' do %>(){
<% end %>
    using boost::lambda::_1; // this would be used in for_each for element
    using boost::lambda::_2; // this would be used in for_each for x
    using boost::lambda::_3; // this would be used in for_each for y
    int width = ms()->width(); //, height = ms()->height();
    utils::vector_2d<int> cube_colors(width, ms()->starting_line());

    int const one_color_amounts = std::ceil(
        static_cast<double>(width)*ms()->starting_line()/ms()->color_amounts()
    );
    utils::for_each(cube_colors, _1 = (_2+_3*width)/one_color_amounts + 1);

    utils::ChainChecker::until_no_chained_cubes(cube_colors, ms()->chain_amounts());

    presenter::pMap owner = owner_.lock();
    for(int i=0, iend=cube_colors.num_elements(); i!=iend; ++i)
    {
        int x = i%width, y = i/width;
        insert_cube( owner->make_cube(x, y, cube_colors[x][y])->model() );
    }

	fill_preview_queue(); // added

    return *this;
}

void <% debug_hook 'Map::cycle_cubes' do %>(){
<% end %>
    utils::for_each_ignore_null(cubes_, std::tr1::bind(&Map::cycle_a_cube, this, _1, _2, _3));
}

void <% debug_hook 'Map::cycle_a_cube' do %>(pCube c, int x, int y){
<% end %>
    if( !c->has_grounded() ){
        dropping_creatable_ = false;
        if( !c->is_garbage() ) garbage_dumpable_ = false;
    }
    if(  c->cycle_and_die() ) cubes_[x][y].reset(), owner_.lock()->release(c);
}

Map& <% debug_hook 'Map::insert_cube' do %>(pCube cube){
<% end %>
    cubes_[cube->x()][cube->y()] = cube;
    return *this;
}

Map& <% debug_hook 'Map::insert_garbage' do %>(pCube cube){
<% end %>
    cube->be_garbage().go_dropping();
    return insert_cube(cube);
}

Map& <% debug_hook 'Map::insert_preview' do %>(pCube cube){
<% end %>
    cubes_preview_.push_back(cube);
    return *this;
}

Map& <% debug_hook 'Map::update_cube_position' do %>(pCube cube, int old_x, int old_y){
<% end %>
    cubes_[cube->x()][cube->y()] = cube;
    cubes_[old_x][old_y].reset();
    return *this;
}

// used Waiting::cycle
state::pState <% debug_hook 'Map::next_state' do %>(pCube cube){
<% end %>
    if( state::pWaiting waiting = cube->is_waiting() ){

        if( waiting->need_check() ){
            pOneFading one_fading = make_OneFading(cube);

            if( one_fading ){
                one_fading->fade(cube);
                return state::Dying::create(cube);
            }
            waiting->checked();
            cube->set_grounded(); // once grounded, always grounded
        }
    }

    if( is_below_empty(cube) ){
        // cubes_[cube->x()][cube->y()].reset();
        // cube->drop_a_block(); // NOTE: we should call drop_a_block with state changing to dropping,
                              //       don't call drop_a_block and then change the state.
                              //       they should be called together.
        // cubes_[cube->x()][cube->y()] = cube;
        if( cube->is_dropping() )
            return state::pState();
        else
            return state::Dropping::create(cube);
    }
    else{
        if( cube->is_waiting() )
            return state::pState();
        else{
            // Sound::i().cube_dropped();
            return state::Waiting::create(cube);
        }
    }
    // throw "impossible flow";
    return state::pState();
}

// resolve the chain on the cube
void <% debug_hook 'Map::cubes_belong_to_the_chain_from_bottom_to_top' do %>(pCube that, pChain chain){
<% end %>
    // start chainging
	for(int x=that->x(), y=that->y();
        cubes_[x][y].use_count() != 0 &&
        cubes_[x][y]->is_waiting() && // added: important
		cubes_[x][y]->chain().use_count() == 0 // added: important
		; ++y)
    {
        cubes_[x][y]->chain(chain);
    }
}

// create a row of chaining cubes,
// not_traveled indicates that cubes we need to search;
// result indicates that cubes were successfully built
void <% debug_hook 'Map::make_row' do %>(pCube that, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    std::vector<pCube> row;

    for(int i=that->x(); i>=0; --i) // include self
        if( check_not_continue( row, that, cubes_[i][that->y()] ) )
            break;

    for(int i=that->x()+1, iend=ms()->width(); i!=iend; ++i) // exclude self
        if( check_not_continue( row, that, cubes_[i][that->y()] ) )
            break;

    if(static_cast<int>(row.size()) >= ms()->chain_amounts())
        process_chaining(row, not_traveled, result);
}

// same as make_row, but column instead.
void <% debug_hook 'Map::make_column' do %>(pCube that, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    std::vector<pCube> column;

    for(int i=that->y(); i>=0; --i) // include self
        if( check_not_continue( column, that, cubes_[that->x()][i] ) )
            break;

    for(int i=that->y()+1, iend=ms()->height(); i!=iend; ++i) // exclude self
        if( check_not_continue( column, that, cubes_[that->x()][i] ) )
            break;

    if(static_cast<int>(column.size()) >= ms()->chain_amounts())
        process_chaining(column, not_traveled, result);
}

// create a cube list that we need for one fading.
// traveld indicates that the cubes we traveled through the process;
// not_traveled indicates that the cubes we should travel through the process;
// result would contain the cubes we need to build one fading.
void <% debug_hook 'Map::make_clist' do %>(cube_list_type& traveled, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    if(not_traveled.size()){
        cube_list_type::iterator node = not_traveled.begin();
        pCube cube = *node;

        if( traveled.count(cube) == 0 ){
            make_row(cube, not_traveled, result);
            make_column(cube, not_traveled, result);
            traveled.insert(cube);
        }

        not_traveled.erase(node);

        make_clist(traveled, not_traveled, result);
    }
}

// create a one fading through that cube,
// find the cubes in this one fading with make_clist
pOneFading <% debug_hook 'Map::make_OneFading' do %>(pCube that){
<% end %>
    cube_list_type traveled, not_traveled, result;
    not_traveled.insert(that);
    make_clist(traveled, not_traveled, result);
    return result.size() ? OneFading::create(*this, result) : pOneFading();
}

bool <% debug_hook 'Map::is_below_empty' do %>(cpCube that) const{
<% end %>
    if( that->y() == 0 ) return false;
    else return cubes_[that->x()][that->y()-1].use_count() == 0;
    // throw "impossible flow!";
    return false;
}

// all cubes share the same column with that lose the chain
bool <% debug_hook 'Map::cube_can_lose_chain' do %>(cpCube that) const{
<% end %>
	for( int x = that->x(), y = that->y()-1; y >= 0; --y )
	    if( cubes_[x][y].use_count() == 0 ||
	        cubes_[x][y]->is_dying() /*|| cubes_[x][y]->is_exploding()*/ )
	    {
	        // when it's empty, dying or exploding, the square ontop can't lose chain
	        return false;
	    }
	return true;
}

void <% debug_hook 'Map::update_chains' do %>(){
<% end %>
    int damage_factor = ms()->damage_factor();
    presenter::pMap o = owner();

    current_sum_of_attack_ = 0;
    int idx = 0;
    for(chain_list_type::iterator i=chains_.begin(); i != chains_.end();)
    {
        // when the Chain's rear is not zero we notify to add a new combo
        if( (*i)->last_step_amounts() != 0 ){
            // damage_factor to score adjustment (1.00 ~ 2.00)
            o->show_chain( (*i)->step(), idx );
            ++idx;
            score_ += (*i)->score_step() * damage_factor;
            (*i)->step_one();
        }

        // when the Chain's all dead then we fire up the attack and make this one null
        if( (*i).use_count() == 1 ){
            // damage_factor to score adjustment (1.00 ~ 2.00)
            o->throw_garbage( (*i)->power_factor() * damage_factor );
            i = chains_.erase(i);
        }
        else{
            current_sum_of_attack_ += (*i)->power_factor() * damage_factor;
            ++i;
        }
    }
}

void <% debug_hook 'Map::cycle_creation_garbage' do %>(){
<% end %>
    std::vector<int> is_empty;
    int top = ms()->height()-1;
	// check empty columns
	for( int x=0, width=ms()->width(); x < width; ++x )
		if( !cubes_[x][top] && !cubes_[x][top-1] )
			is_empty.push_back( x );

	// shuffle the array
    std::random_shuffle(is_empty.begin(), is_empty.end());

	// drop them according to the empty column
    presenter::pMap owner = owner_.lock();
	for( int unsigned i=0; i < is_empty.size() && garbage_left_ > 0 ; ++i ){
        int x = is_empty[i];
		insert_garbage( owner->make_cube(x, top)->model() );
		--garbage_left_;
	}
}

void <% debug_hook 'Map::cycle_creation' do %>(){
<% end %>
	// we must check which column's top is empty when drop squares
	// so we setup an array of columns which its top is empty
    int top = ms()->height()-1;
	std::vector<int> is_empty, not_empty;
	for( int x=0, width = ms()->width(); x < width; ++x )
		if( !cubes_[x][top] && !cubes_[x][top-1] )
			is_empty.push_back(x);
		else
            not_empty.push_back(x);

	if( is_empty.size() == 0 ) return;

    BOOST_FOREACH(int x, is_empty){
        cubes_preview_[x]->x(x).y(top).go_sinking();
        insert_cube(cubes_preview_[x]);
    }

    presenter::pMap owner = owner_.lock();
    BOOST_FOREACH(int x, not_empty){
        owner->release(cubes_preview_[x]);
    }

    fill_preview_queue();

    // if( SG::Instance().game_mode() == 1 ) // if single
    //  garbage_left_ += SG::Instance().random(3);
}

void <% debug_hook 'Map::fill_preview_queue' do %>(){
<% end %>
    cubes_preview_.clear();
    int unsigned width = ms()->width();
	std::vector<int> preview_set; // color set
    preview_set.push_back(utils::random( ms()->color_amounts() )+1);

	if( utils::random(2) ) // need two?
        preview_set.push_back(preview_set.front());

    while( preview_set.size() != width ){
        int color = fill_preview_create_color(preview_set);
		if( width - preview_set.size() == 1 ){
		          preview_set.push_back(color);
        }
		else{
			if( utils::random(2) ){
                  preview_set.push_back(color);
	        	  preview_set.push_back(color);
	        }
		    else{ preview_set.push_back(color); }
		}
	}

    presenter::pMap owner = owner_.lock();
	for( int unsigned x=0; x != width ; ++x )
        cubes_preview_.push_back( owner->make_cube_preview(preview_set[x])->model() );
}

int <% debug_hook 'Map::fill_preview_create_color' do %>(std::vector<int>& preview_set){
<% end %>
    int color, color_amounts = ms()->color_amounts();
	do{
		color = utils::random( color_amounts )+1;
	}while( color == preview_set.back() );
    return color;
}

Map::color_map_type <% debug_hook 'Map::color_map' do %>() const{
<% end %>
    int width = ms()->width(), height = ms()->height();
    color_map_type result(width, height);
    for(int y=0; y<height; ++y)
        for(int x=0; x<width; ++x)
            if(cubes_[x][y])
                result[x][y] = cubes_[x][y]->color_id();
    return result;
}

// added: split warning check from cycle_creation:
void <% debug_hook 'Map::cycle_warning' do %>(){
<% end %>
    bool has_column_full = check_column_full();
    if( !has_column_full && warning_dummy_ ) {
        warning_dummy_.reset();
        owner()->take_out_warning();
    }
    else if( has_column_full && !warning_dummy_ ) {
        warning_dummy_ = std::tr1::shared_ptr<int>(new int);
        owner()->setup_warning();
        ctrl::EventDispatcher::i().subscribe_timer( bind(&presenter::Map::setup_warning, owner().get()),
            warning_dummy_, 1000, 3);
        ctrl::EventDispatcher::i().subscribe_timer( bind(&presenter::Map::call_end_game, owner().get()),
            warning_dummy_, 5000);
    }
}

bool <% debug_hook 'Map::check_column_full' do %>() const{
<% end %>
	int counter = 0;
	for( int x=0, width = ms()->width(), y = ms()->height()-2; x < width; ++x ){
		if( cubes_[x][y] && cubes_[x][y]->is_waiting() ){
			++counter;
			// warning_strip_[xx]->Show(CKSHOW);
		}
		else ;// warning_strip_[xx]->Show(CKHIDE);
	}

    return counter > 0;
}
