
#include "model/pirate/MapUtils.hpp"

#include "presenter/Map.hpp"
#include "model/Map.hpp"
#include "model/Cube.hpp"
#include "model/OneFading.hpp"
#include "model/state/Waiting.hpp"
#include "model/state/Dropping.hpp"
#include "model/state/Dying.hpp"

#include "utils/ChainChecker.hpp"
#include "utils/for_each_multi_array.hpp"
#include "utils/vector_2d.hpp"

#include <boost/lambda/lambda.hpp>

<%= debug_include %>

using namespace psc;
using namespace model;
using namespace pirate;
using namespace std::tr1::placeholders;

Map& <% debug_hook 'Map::init_cubes' do %>(){
<% end %>
    using boost::lambda::_1; // this would be used in for_each for element
    using boost::lambda::_2; // this would be used in for_each for index
    int width = ms()->width(); //, height = ms()->height();
    utils::vector_2d cube_colors(boost::extents[width][ms()->starting_line()]);

    int const one_color_amounts = std::ceil(
        static_cast<double>(width)*ms()->starting_line()/ms()->color_amounts()
    );
    utils::for_each(cube_colors, _1 = _2/one_color_amounts + 1);

    // utils::ChainChecker::until_no_chained_cubes(cube_colors, ms()->chain_amounts());

    presenter::pMap owner = owner_.lock();
    for(int i=0, iend=cube_colors.num_elements(); i!=iend; ++i)
    {
        int x = i%width, y = i/width;
        insert( owner->make_cube(x, y, cube_colors[x][y])->model() );
    }
    return *this;
}

void <% debug_hook 'Map::refresh_cubes' do %>(){
<% end %>
    utils::for_each_ignore_null(cubes_, std::tr1::bind(&Cube::refresh, _1));
}

void <% debug_hook 'Map::cycle_cubes' do %>(){
<% end %>
    n_of_newcomers_ = 0;
    utils::for_each_ignore_null(cubes_, std::tr1::bind(&Map::cycle_a_cube, this, _1, _2));
}

void <% debug_hook 'Map::cycle_a_cube' do %>(pCube c, int i){
<% end %>
    if( !c->has_grounded()  ) ++n_of_newcomers_;
    if(  c->cycle_and_die() ) cubes_.origin()[i].reset(), owner_.lock()->release(c);
}

Map& <% debug_hook 'Map::insert' do %>(pCube cube){
<% end %>
    cubes_[cube->x()][cube->y()] = cube;
    return *this;
}

// used by Dropping::cycle, Waiting::cycle
state::pState <% debug_hook 'Map::next_state' do %>(pCube that){
<% end %>
    if( state::pWaiting waiting = that->is_waiting() ){

		if( waiting->need_check() ){
            pOneFading one_fading = make_OneFading(that);

            if( one_fading ){
                one_fading->fade(that);
                return state::Dying::create(that);
            }
            waiting->checked();
			that->set_grounded(); // once grounded, always grounded
        }
		if( waiting->need_check_chain_property() ){
			if( cube_can_lose_chain(that) ) { 
	            that->lose_chain();
				if( !that->is_garbage() )
				    that->hide_outline();
			}
			waiting->chain_property_checked();
		}
    }

    if( is_below_empty(that) ){
        cubes_[that->x()][that->y()].reset();
        that->drop_a_block();
        cubes_[that->x()][that->y()] = that;
        if( that->is_dropping() )
            return state::pState();
        else
            return state::Dropping::create(that);
    }
    else{
        if( that->is_waiting() )
            return state::pState();
		else{
			// Sound::i().cube_dropped();
            return state::Waiting::create(that);
		}
    }
    // throw "impossible flow";
    return state::pState();
}

void <% debug_hook 'Map::cubes_belong_to_the_chain_from_bottom_to_top' do %>(pCube that, pChain chain){
<% end %>
    for(int x=that->x(), y=that->y();
		cubes_[x][y].use_count() != 0 &&
		cubes_[x][y]->is_waiting() &&
        cubes_[x][y]->chain() == chain
		; ++y)
    {
        cubes_[x][y]->lose_chain_delay() = 0;
    }

	for(int x=that->x(), y=that->y();
        cubes_[x][y].use_count() != 0 &&
        cubes_[x][y]->is_waiting() && // added: important
		cubes_[x][y]->chain().use_count() == 0 // added: important
		; ++y)
    {
        cubes_[x][y]->chain(chain);
		cubes_[x][y]->show_outline();
        cubes_[x][y]->lose_chain_delay() = 0;
        chain->inc_one_owner();
    }
}

void <% debug_hook 'Map::make_row' do %>(pCube that, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    std::vector<pCube> row;

    for(int i=that->x(); i>=0; --i) // include self
        if( check_not_continue( row, that, cubes_[i][that->y()] ) )
            break;

    for(int i=that->x()+1, iend=ms()->width(); i!=iend; ++i) // exclude self
        if( check_not_continue( row, that, cubes_[i][that->y()] ) )
            break;

    if(static_cast<int>(row.size()) >= ms()->chain_amounts())
        process_chaining(row, not_traveled, result);
}

void <% debug_hook 'Map::make_column' do %>(pCube that, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    std::vector<pCube> column;

    for(int i=that->y(); i>=0; --i) // include self
        if( check_not_continue( column, that, cubes_[that->x()][i] ) )
            break;

    for(int i=that->y()+1, iend=ms()->height(); i!=iend; ++i) // exclude self
        if( check_not_continue( column, that, cubes_[that->x()][i] ) )
            break;

    if(static_cast<int>(column.size()) >= ms()->chain_amounts())
        process_chaining(column, not_traveled, result);
}

void <% debug_hook 'Map::make_clist' do %>(cube_list_type& traveled, cube_list_type& not_traveled, cube_list_type& result){
<% end %>
    if(not_traveled.size()){
        cube_list_type::iterator node = not_traveled.begin();
        pCube s = *node;

        if( traveled.count(s) == 0 ){
            make_row(s, not_traveled, result);
            make_column(s, not_traveled, result);
            traveled.insert(s);
        }

        not_traveled.erase(node);

        make_clist(traveled, not_traveled, result);
    }
}

pOneFading <% debug_hook 'Map::make_OneFading' do %>(pCube that){
<% end %>
    cube_list_type traveled, not_traveled, result;
    not_traveled.insert(that);
    make_clist(traveled, not_traveled, result);
    return result.size() ? OneFading::create(*this, result) : pOneFading();
}

bool <% debug_hook 'Map::is_below_empty' do %>(cpCube that) const{
<% end %>
    if( that->y()-1 < 0 ) return false;
    else return cubes_[that->x()][that->y()-1].use_count() == 0;
    // throw "impossible flow!";
    return false;
}

bool <% debug_hook 'Map::cube_can_lose_chain' do %>(cpCube that) const{
<% end %>
	for( int x = that->x(), y = that->y()-1; y >= 0; --y )
	    if( cubes_[x][y].use_count() == 0 ||
	        cubes_[x][y]->is_dying() || cubes_[x][y]->is_exploding() ) 
	    {
	        // when it's empty, dying or exploding, the square ontop can't lose chain
	        return false;
	    }
	return true;
}

void <% debug_hook 'Map::update_chains' do %>(){
    for(std::vector<Chain*>::iterator i=chains_.begin();
        i != chains_.end(); ++i)
    {
        // when the Chain's rear is not zero we notify to add a new combo
		if( (**i).last_step_amounts() != 0 ){
		    // damage_factor to score adjustment (1.00 ~ 2.00)
			score_ += (**i).score_step() * ms().damage_factor;
			(**i).step_one();
		}

        // when the Chain's all dead then we fire up the attack and make this one null
		if( (**i).owner_amounts() == 0 ){
		    // damage_factor to score adjustment (1.00 ~ 2.00)
			SG::Instance().make_garbage( this, (**i).power_factor() * ms().damage_factor );
            (**i).suicide();
            i = chains_.erase(i);
            --i;
		}
	}
}

Map::preview_type <% debug_hook 'Map::preview' do %>() const{
<% end %>
    int width = ms()->width(), height = ms()->height();
    preview_type result(boost::extents[width][height]);
    for(int y=0; y<height; ++y)
        for(int x=0; x<width; ++x)
            if(cubes_[x][y])
                result[x][y] = cubes_[x][y]->color_id();
    return result;
}
