
#include "presenter/Cube.hpp"
#include "presenter/Map.hpp"
#include "model/Map.hpp"

#include "all_fwd.hpp"
#include <boost/foreach.hpp>

<%= debug_include %>

using namespace psc;
using namespace presenter;

Map& <% debug_hook 'Map::push_view' do %>(make_view_type make_view){
<% end %>
    typedef std::pair<model::wpCube, pCube> cube_pair_type; // macro workaround
    BOOST_FOREACH(cube_pair_type cube_pair, cubes_){
        pCube cube = cube_pair.second;
        cube->push_view(make_view(cube->x(), cube->y(), cube->color_id()));
    }
    make_view_list_.push_back(make_view);
    return *this;
}

pMap <% debug_hook 'Map::init' do %>(){
<% end %>
    pMap self = shared_from_this();
    model_ = model::Map::create(self, setting_);
    model_->init_cubes(); // beware! this need refer model_!
    // view_ = view::Map::create(self);
    return self;
}

pCube <% debug_hook 'Map::make_cube' do %>(int x, int y, int color_id){
<% end %>
    pCube cube = Cube::create(shared_from_this(), x, y, color_id);
    cube->model()->drop_a_block_event( std::tr1::bind( &Cube::drop_a_block, cube.get() ) );
    BOOST_FOREACH(make_view_type& make_view, make_view_list_){
        cube->push_view(make_view(cube->x(), cube->y(), cube->color_id()));
    }
    cubes_.insert(std::make_pair(cube->model(), cube));
    return cube;
}

pCube <% debug_hook 'Map::make_cube_preview' do %>(int color_id){
<% end %>
    return make_cube(-1, -1, color_id);
}

Map& <% debug_hook 'Map::cycle' do %>(){
<% end %>
    model()->cycle();
    // view()->cycle();
    return *this;
}
